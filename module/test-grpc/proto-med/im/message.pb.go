// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: med-common/app/service/med-xim/api/im/message.proto

package xim

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	entity "go-test/module/test-grpc/proto-med/im/entity"
	types "go-test/module/test-grpc/proto-med/im/entity/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HandleRequest struct {
	Data                 *entity.Message `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	FromProxy            bool            `protobuf:"varint,2,opt,name=fromProxy,proto3" json:"fromProxy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HandleRequest) Reset()         { *m = HandleRequest{} }
func (m *HandleRequest) String() string { return proto.CompactTextString(m) }
func (*HandleRequest) ProtoMessage()    {}
func (*HandleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234a1ec39f6e098, []int{0}
}
func (m *HandleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HandleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleRequest.Merge(m, src)
}
func (m *HandleRequest) XXX_Size() int {
	return m.Size()
}
func (m *HandleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandleRequest proto.InternalMessageInfo

func (m *HandleRequest) GetData() *entity.Message {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *HandleRequest) GetFromProxy() bool {
	if m != nil {
		return m.FromProxy
	}
	return false
}

type HandleResponse struct {
	MsgId                int64    `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`
	Info                 string   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandleResponse) Reset()         { *m = HandleResponse{} }
func (m *HandleResponse) String() string { return proto.CompactTextString(m) }
func (*HandleResponse) ProtoMessage()    {}
func (*HandleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234a1ec39f6e098, []int{1}
}
func (m *HandleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HandleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleResponse.Merge(m, src)
}
func (m *HandleResponse) XXX_Size() int {
	return m.Size()
}
func (m *HandleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HandleResponse proto.InternalMessageInfo

func (m *HandleResponse) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *HandleResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type SendSystemRequest struct {
	UserIds  []uint32 `protobuf:"varint,1,rep,packed,name=userIds,proto3" json:"userIds,omitempty"`
	Type     string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	SenderId uint32   `protobuf:"varint,3,opt,name=senderId,proto3" json:"senderId,omitempty"`
	// Types that are valid to be assigned to Cols:
	//	*SendSystemRequest_Text
	//	*SendSystemRequest_Card
	//	*SendSystemRequest_Notify
	Cols                 isSendSystemRequest_Cols `protobuf_oneof:"cols"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SendSystemRequest) Reset()         { *m = SendSystemRequest{} }
func (m *SendSystemRequest) String() string { return proto.CompactTextString(m) }
func (*SendSystemRequest) ProtoMessage()    {}
func (*SendSystemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234a1ec39f6e098, []int{2}
}
func (m *SendSystemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendSystemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendSystemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendSystemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendSystemRequest.Merge(m, src)
}
func (m *SendSystemRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendSystemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendSystemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendSystemRequest proto.InternalMessageInfo

type isSendSystemRequest_Cols interface {
	isSendSystemRequest_Cols()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SendSystemRequest_Text struct {
	Text *types.Text `protobuf:"bytes,4,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type SendSystemRequest_Card struct {
	Card *types.Card `protobuf:"bytes,5,opt,name=card,proto3,oneof" json:"card,omitempty"`
}
type SendSystemRequest_Notify struct {
	Notify *types.BusinessNotify `protobuf:"bytes,6,opt,name=notify,proto3,oneof" json:"notify,omitempty"`
}

func (*SendSystemRequest_Text) isSendSystemRequest_Cols()   {}
func (*SendSystemRequest_Card) isSendSystemRequest_Cols()   {}
func (*SendSystemRequest_Notify) isSendSystemRequest_Cols() {}

func (m *SendSystemRequest) GetCols() isSendSystemRequest_Cols {
	if m != nil {
		return m.Cols
	}
	return nil
}

func (m *SendSystemRequest) GetUserIds() []uint32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *SendSystemRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SendSystemRequest) GetSenderId() uint32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *SendSystemRequest) GetText() *types.Text {
	if x, ok := m.GetCols().(*SendSystemRequest_Text); ok {
		return x.Text
	}
	return nil
}

func (m *SendSystemRequest) GetCard() *types.Card {
	if x, ok := m.GetCols().(*SendSystemRequest_Card); ok {
		return x.Card
	}
	return nil
}

func (m *SendSystemRequest) GetNotify() *types.BusinessNotify {
	if x, ok := m.GetCols().(*SendSystemRequest_Notify); ok {
		return x.Notify
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SendSystemRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SendSystemRequest_Text)(nil),
		(*SendSystemRequest_Card)(nil),
		(*SendSystemRequest_Notify)(nil),
	}
}

type SendSystemResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendSystemResponse) Reset()         { *m = SendSystemResponse{} }
func (m *SendSystemResponse) String() string { return proto.CompactTextString(m) }
func (*SendSystemResponse) ProtoMessage()    {}
func (*SendSystemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234a1ec39f6e098, []int{3}
}
func (m *SendSystemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendSystemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendSystemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendSystemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendSystemResponse.Merge(m, src)
}
func (m *SendSystemResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendSystemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendSystemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendSystemResponse proto.InternalMessageInfo

type DelChatRequest struct {
	UserId               uint32   `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	MapId                string   `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelChatRequest) Reset()         { *m = DelChatRequest{} }
func (m *DelChatRequest) String() string { return proto.CompactTextString(m) }
func (*DelChatRequest) ProtoMessage()    {}
func (*DelChatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234a1ec39f6e098, []int{4}
}
func (m *DelChatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelChatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelChatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelChatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelChatRequest.Merge(m, src)
}
func (m *DelChatRequest) XXX_Size() int {
	return m.Size()
}
func (m *DelChatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelChatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelChatRequest proto.InternalMessageInfo

func (m *DelChatRequest) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelChatRequest) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

type DelChatResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelChatResponse) Reset()         { *m = DelChatResponse{} }
func (m *DelChatResponse) String() string { return proto.CompactTextString(m) }
func (*DelChatResponse) ProtoMessage()    {}
func (*DelChatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234a1ec39f6e098, []int{5}
}
func (m *DelChatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelChatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelChatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelChatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelChatResponse.Merge(m, src)
}
func (m *DelChatResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelChatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelChatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelChatResponse proto.InternalMessageInfo

type AddToWhiteListRequest struct {
	UserIdList           []uint32 `protobuf:"varint,1,rep,packed,name=userIdList,proto3" json:"userIdList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddToWhiteListRequest) Reset()         { *m = AddToWhiteListRequest{} }
func (m *AddToWhiteListRequest) String() string { return proto.CompactTextString(m) }
func (*AddToWhiteListRequest) ProtoMessage()    {}
func (*AddToWhiteListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234a1ec39f6e098, []int{6}
}
func (m *AddToWhiteListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddToWhiteListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddToWhiteListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddToWhiteListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddToWhiteListRequest.Merge(m, src)
}
func (m *AddToWhiteListRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddToWhiteListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddToWhiteListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddToWhiteListRequest proto.InternalMessageInfo

func (m *AddToWhiteListRequest) GetUserIdList() []uint32 {
	if m != nil {
		return m.UserIdList
	}
	return nil
}

type AddToWhiteListResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddToWhiteListResponse) Reset()         { *m = AddToWhiteListResponse{} }
func (m *AddToWhiteListResponse) String() string { return proto.CompactTextString(m) }
func (*AddToWhiteListResponse) ProtoMessage()    {}
func (*AddToWhiteListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234a1ec39f6e098, []int{7}
}
func (m *AddToWhiteListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddToWhiteListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddToWhiteListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddToWhiteListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddToWhiteListResponse.Merge(m, src)
}
func (m *AddToWhiteListResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddToWhiteListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddToWhiteListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddToWhiteListResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HandleRequest)(nil), "med.xim.HandleRequest")
	proto.RegisterType((*HandleResponse)(nil), "med.xim.HandleResponse")
	proto.RegisterType((*SendSystemRequest)(nil), "med.xim.SendSystemRequest")
	proto.RegisterType((*SendSystemResponse)(nil), "med.xim.SendSystemResponse")
	proto.RegisterType((*DelChatRequest)(nil), "med.xim.DelChatRequest")
	proto.RegisterType((*DelChatResponse)(nil), "med.xim.DelChatResponse")
	proto.RegisterType((*AddToWhiteListRequest)(nil), "med.xim.AddToWhiteListRequest")
	proto.RegisterType((*AddToWhiteListResponse)(nil), "med.xim.AddToWhiteListResponse")
}

func init() {
	proto.RegisterFile("med-common/app/service/med-xim/api/im/message.proto", fileDescriptor_a234a1ec39f6e098)
}

var fileDescriptor_a234a1ec39f6e098 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0xc7, 0x9b, 0xb6, 0x9b, 0xee, 0x1e, 0x69, 0xa5, 0xc3, 0xda, 0x0d, 0x51, 0x6a, 0x09, 0x5e,
	0x14, 0xc4, 0x44, 0x76, 0x2f, 0x84, 0x15, 0x0b, 0x76, 0x05, 0x5b, 0x50, 0x91, 0x74, 0x41, 0xd8,
	0x1b, 0xc9, 0x76, 0xa6, 0xbb, 0x03, 0x9d, 0x24, 0x66, 0xa6, 0x92, 0x3e, 0x82, 0xef, 0xe1, 0xc3,
	0x78, 0xe9, 0x23, 0x48, 0x9f, 0x44, 0xe6, 0x23, 0xe9, 0x76, 0x5b, 0xc5, 0x8f, 0xbb, 0x39, 0x67,
	0xce, 0xff, 0x9f, 0x39, 0xbf, 0x73, 0x02, 0x27, 0x8c, 0xe0, 0x27, 0xd3, 0x84, 0xb1, 0x24, 0x0e,
	0xa2, 0x34, 0x0d, 0x38, 0xc9, 0x3e, 0xd3, 0x29, 0x09, 0x64, 0x3a, 0xa7, 0x2c, 0x88, 0x52, 0x1a,
	0x50, 0x16, 0x30, 0xc2, 0x79, 0x74, 0x45, 0xfc, 0x34, 0x4b, 0x44, 0x82, 0x1a, 0x8c, 0x60, 0x3f,
	0xa7, 0xcc, 0x3d, 0xfd, 0x33, 0x35, 0x89, 0x05, 0x15, 0xcb, 0x4d, 0x13, 0xf7, 0xc5, 0x5f, 0x69,
	0xc5, 0x32, 0x25, 0x3c, 0x10, 0x24, 0x17, 0xff, 0x21, 0x9f, 0x46, 0x19, 0x36, 0xf2, 0xd1, 0x3f,
	0xc8, 0x2f, 0x17, 0x9c, 0xc6, 0x84, 0xf3, 0x8f, 0x71, 0x22, 0xe8, 0x6c, 0xa9, 0x9d, 0xbc, 0x0b,
	0x68, 0x8e, 0xa2, 0x18, 0xcf, 0x49, 0x48, 0x3e, 0x2d, 0x08, 0x17, 0xe8, 0x31, 0xd4, 0x71, 0x24,
	0x22, 0xc7, 0xea, 0x59, 0xfd, 0x3b, 0xc7, 0x47, 0xbe, 0x81, 0xe5, 0x6b, 0x2f, 0xff, 0xad, 0xa6,
	0x10, 0xaa, 0x22, 0xf4, 0x00, 0x0e, 0x66, 0x59, 0xc2, 0xde, 0x67, 0x49, 0xbe, 0x74, 0xaa, 0x3d,
	0xab, 0xbf, 0x1f, 0xae, 0x13, 0xde, 0x29, 0xb4, 0x0a, 0x6f, 0x9e, 0x26, 0x31, 0x27, 0xe8, 0x10,
	0xf6, 0x18, 0xbf, 0x1a, 0x63, 0xe5, 0x5e, 0x0b, 0x75, 0x80, 0x10, 0xd4, 0x69, 0x3c, 0x4b, 0x94,
	0xc1, 0x41, 0xa8, 0xce, 0xde, 0x97, 0x2a, 0xb4, 0x27, 0x24, 0xc6, 0x93, 0x25, 0x17, 0x84, 0x15,
	0x8f, 0x73, 0xa0, 0xb1, 0xe0, 0x24, 0x1b, 0x63, 0xee, 0x58, 0xbd, 0x5a, 0xbf, 0x19, 0x16, 0xa1,
	0xf4, 0x90, 0x6d, 0x16, 0x1e, 0xf2, 0x8c, 0x5c, 0xd8, 0xe7, 0x24, 0xc6, 0xb2, 0xc0, 0xa9, 0xf5,
	0xac, 0x7e, 0x33, 0x2c, 0x63, 0xf4, 0x14, 0xea, 0x72, 0x1c, 0x4e, 0x5d, 0xb5, 0xe9, 0xde, 0x6e,
	0x53, 0x21, 0xf3, 0xcf, 0x49, 0x2e, 0x46, 0x95, 0x50, 0x55, 0x4a, 0x85, 0x9c, 0x80, 0xb3, 0xf7,
	0x3b, 0xc5, 0x59, 0x94, 0x61, 0xa9, 0x90, 0x95, 0x68, 0x00, 0xb6, 0x66, 0xed, 0xd8, 0x4a, 0xf3,
	0x68, 0xb7, 0x66, 0x68, 0x06, 0xf3, 0x4e, 0xd5, 0x8e, 0x2a, 0xa1, 0x51, 0x0d, 0x6d, 0xa8, 0x4f,
	0x93, 0x39, 0xf7, 0x0e, 0x01, 0xdd, 0x44, 0xa1, 0x59, 0x7a, 0x03, 0x68, 0xbd, 0x22, 0xf3, 0xb3,
	0xeb, 0x48, 0x14, 0x74, 0x3a, 0x60, 0x6b, 0x1c, 0x0a, 0x6f, 0x33, 0x34, 0x91, 0xa2, 0x1e, 0xa5,
	0x63, 0x6c, 0xe0, 0xe8, 0xc0, 0x6b, 0xc3, 0xdd, 0x52, 0x6f, 0x2c, 0x9f, 0xc1, 0xbd, 0x97, 0x18,
	0x9f, 0x27, 0x1f, 0xae, 0xa9, 0x20, 0x6f, 0x28, 0x2f, 0x9d, 0xbb, 0x00, 0xda, 0x4b, 0x26, 0x0d,
	0xfa, 0x1b, 0x19, 0xcf, 0x81, 0xce, 0x6d, 0xa1, 0xb6, 0x3c, 0xfe, 0x5a, 0x85, 0x86, 0xd9, 0x19,
	0xf4, 0x1c, 0x6c, 0xbd, 0x0f, 0xa8, 0x53, 0x92, 0xd8, 0x58, 0x3e, 0xf7, 0x68, 0x2b, 0x6f, 0x5e,
	0x56, 0x41, 0xaf, 0x01, 0xd6, 0x10, 0xd0, 0x1a, 0xff, 0xd6, 0x92, 0xb8, 0xf7, 0x77, 0xde, 0x95,
	0x46, 0x03, 0x68, 0x98, 0xbe, 0xd1, 0xfa, 0x73, 0x9b, 0x24, 0x5d, 0x67, 0xfb, 0xa2, 0xd4, 0x4f,
	0xa0, 0xb5, 0xd9, 0x2b, 0xea, 0x96, 0xd5, 0x3b, 0xe9, 0xb9, 0x0f, 0x7f, 0x79, 0x5f, 0x98, 0x0e,
	0xdb, 0xdf, 0x56, 0x5d, 0xeb, 0xfb, 0xaa, 0x6b, 0xfd, 0x58, 0x75, 0xad, 0x8b, 0x5a, 0x4e, 0xd9,
	0xa5, 0xad, 0x7e, 0xd0, 0x93, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0xf9, 0x98, 0x36, 0xe4,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageClient interface {
	// 发消息
	Handle(ctx context.Context, in *HandleRequest, opts ...grpc.CallOption) (*HandleResponse, error)
	// 发送系统消息
	SendSystem(ctx context.Context, in *SendSystemRequest, opts ...grpc.CallOption) (*SendSystemResponse, error)
	// 删除指定用户的会话入口(不会删除群组的其他用户会话入口)
	DelChat(ctx context.Context, in *DelChatRequest, opts ...grpc.CallOption) (*DelChatResponse, error)
	// 添加白名单
	AddToWhiteList(ctx context.Context, in *AddToWhiteListRequest, opts ...grpc.CallOption) (*AddToWhiteListResponse, error)
}

type messageClient struct {
	cc *grpc.ClientConn
}

func NewMessageClient(cc *grpc.ClientConn) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) Handle(ctx context.Context, in *HandleRequest, opts ...grpc.CallOption) (*HandleResponse, error) {
	out := new(HandleResponse)
	err := c.cc.Invoke(ctx, "/med.xim.Message/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) SendSystem(ctx context.Context, in *SendSystemRequest, opts ...grpc.CallOption) (*SendSystemResponse, error) {
	out := new(SendSystemResponse)
	err := c.cc.Invoke(ctx, "/med.xim.Message/SendSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) DelChat(ctx context.Context, in *DelChatRequest, opts ...grpc.CallOption) (*DelChatResponse, error) {
	out := new(DelChatResponse)
	err := c.cc.Invoke(ctx, "/med.xim.Message/DelChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) AddToWhiteList(ctx context.Context, in *AddToWhiteListRequest, opts ...grpc.CallOption) (*AddToWhiteListResponse, error) {
	out := new(AddToWhiteListResponse)
	err := c.cc.Invoke(ctx, "/med.xim.Message/AddToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
type MessageServer interface {
	// 发消息
	Handle(context.Context, *HandleRequest) (*HandleResponse, error)
	// 发送系统消息
	SendSystem(context.Context, *SendSystemRequest) (*SendSystemResponse, error)
	// 删除指定用户的会话入口(不会删除群组的其他用户会话入口)
	DelChat(context.Context, *DelChatRequest) (*DelChatResponse, error)
	// 添加白名单
	AddToWhiteList(context.Context, *AddToWhiteListRequest) (*AddToWhiteListResponse, error)
}

// UnimplementedMessageServer can be embedded to have forward compatible implementations.
type UnimplementedMessageServer struct {
}

func (*UnimplementedMessageServer) Handle(ctx context.Context, req *HandleRequest) (*HandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (*UnimplementedMessageServer) SendSystem(ctx context.Context, req *SendSystemRequest) (*SendSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSystem not implemented")
}
func (*UnimplementedMessageServer) DelChat(ctx context.Context, req *DelChatRequest) (*DelChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelChat not implemented")
}
func (*UnimplementedMessageServer) AddToWhiteList(ctx context.Context, req *AddToWhiteListRequest) (*AddToWhiteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}

func RegisterMessageServer(s *grpc.Server, srv MessageServer) {
	s.RegisterService(&_Message_serviceDesc, srv)
}

func _Message_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.xim.Message/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Handle(ctx, req.(*HandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_SendSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).SendSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.xim.Message/SendSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).SendSystem(ctx, req.(*SendSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_DelChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).DelChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.xim.Message/DelChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).DelChat(ctx, req.(*DelChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.xim.Message/AddToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).AddToWhiteList(ctx, req.(*AddToWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Message_serviceDesc = grpc.ServiceDesc{
	ServiceName: "med.xim.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _Message_Handle_Handler,
		},
		{
			MethodName: "SendSystem",
			Handler:    _Message_SendSystem_Handler,
		},
		{
			MethodName: "DelChat",
			Handler:    _Message_DelChat_Handler,
		},
		{
			MethodName: "AddToWhiteList",
			Handler:    _Message_AddToWhiteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "med-common/app/service/med-xim/api/im/message.proto",
}

func (m *HandleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HandleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FromProxy {
		i--
		if m.FromProxy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HandleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HandleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendSystemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendSystemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendSystemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cols != nil {
		{
			size := m.Cols.Size()
			i -= size
			if _, err := m.Cols.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SenderId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserIds) > 0 {
		dAtA3 := make([]byte, len(m.UserIds)*10)
		var j2 int
		for _, num := range m.UserIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintMessage(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendSystemRequest_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendSystemRequest_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SendSystemRequest_Card) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendSystemRequest_Card) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Card != nil {
		{
			size, err := m.Card.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SendSystemRequest_Notify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendSystemRequest_Notify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Notify != nil {
		{
			size, err := m.Notify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SendSystemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendSystemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendSystemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DelChatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelChatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelChatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelChatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AddToWhiteListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddToWhiteListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddToWhiteListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserIdList) > 0 {
		dAtA8 := make([]byte, len(m.UserIdList)*10)
		var j7 int
		for _, num := range m.UserIdList {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintMessage(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddToWhiteListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddToWhiteListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddToWhiteListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HandleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FromProxy {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HandleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovMessage(uint64(m.MsgId))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendSystemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SenderId != 0 {
		n += 1 + sovMessage(uint64(m.SenderId))
	}
	if m.Cols != nil {
		n += m.Cols.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendSystemRequest_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *SendSystemRequest_Card) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Card != nil {
		l = m.Card.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *SendSystemRequest_Notify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Notify != nil {
		l = m.Notify.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *SendSystemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelChatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessage(uint64(m.UserId))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelChatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddToWhiteListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIdList) > 0 {
		l = 0
		for _, e := range m.UserIdList {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddToWhiteListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HandleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &entity.Message{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromProxy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromProxy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendSystemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendSystemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendSystemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIds) == 0 {
					m.UserIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Text{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cols = &SendSystemRequest_Text{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Card{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cols = &SendSystemRequest_Card{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.BusinessNotify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cols = &SendSystemRequest_Notify{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendSystemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendSystemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendSystemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddToWhiteListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddToWhiteListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddToWhiteListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIdList = append(m.UserIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIdList) == 0 {
					m.UserIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIdList = append(m.UserIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddToWhiteListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddToWhiteListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddToWhiteListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
