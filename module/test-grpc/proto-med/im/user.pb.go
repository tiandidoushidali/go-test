// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: med-common/app/service/med-xim/api/im/user.proto

package xim

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CheckOnLineRequest struct {
	UserId               uint32   `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Reference            uint32   `protobuf:"varint,2,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckOnLineRequest) Reset()         { *m = CheckOnLineRequest{} }
func (m *CheckOnLineRequest) String() string { return proto.CompactTextString(m) }
func (*CheckOnLineRequest) ProtoMessage()    {}
func (*CheckOnLineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_966f2ce1476fd764, []int{0}
}
func (m *CheckOnLineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckOnLineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckOnLineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckOnLineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckOnLineRequest.Merge(m, src)
}
func (m *CheckOnLineRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckOnLineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckOnLineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckOnLineRequest proto.InternalMessageInfo

func (m *CheckOnLineRequest) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckOnLineRequest) GetReference() uint32 {
	if m != nil {
		return m.Reference
	}
	return 0
}

type CheckOnLineResponse struct {
	IsOnline             bool     `protobuf:"varint,1,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckOnLineResponse) Reset()         { *m = CheckOnLineResponse{} }
func (m *CheckOnLineResponse) String() string { return proto.CompactTextString(m) }
func (*CheckOnLineResponse) ProtoMessage()    {}
func (*CheckOnLineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_966f2ce1476fd764, []int{1}
}
func (m *CheckOnLineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckOnLineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckOnLineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckOnLineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckOnLineResponse.Merge(m, src)
}
func (m *CheckOnLineResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckOnLineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckOnLineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckOnLineResponse proto.InternalMessageInfo

func (m *CheckOnLineResponse) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

type CheckOnLineBatchRequest struct {
	UserIdList           []uint32 `protobuf:"varint,1,rep,packed,name=userIdList,proto3" json:"userIdList,omitempty"`
	Reference            uint32   `protobuf:"varint,2,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckOnLineBatchRequest) Reset()         { *m = CheckOnLineBatchRequest{} }
func (m *CheckOnLineBatchRequest) String() string { return proto.CompactTextString(m) }
func (*CheckOnLineBatchRequest) ProtoMessage()    {}
func (*CheckOnLineBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_966f2ce1476fd764, []int{2}
}
func (m *CheckOnLineBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckOnLineBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckOnLineBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckOnLineBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckOnLineBatchRequest.Merge(m, src)
}
func (m *CheckOnLineBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckOnLineBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckOnLineBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckOnLineBatchRequest proto.InternalMessageInfo

func (m *CheckOnLineBatchRequest) GetUserIdList() []uint32 {
	if m != nil {
		return m.UserIdList
	}
	return nil
}

func (m *CheckOnLineBatchRequest) GetReference() uint32 {
	if m != nil {
		return m.Reference
	}
	return 0
}

type CheckOnLineBatchResponse struct {
	List                 []*OnLineStatus `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CheckOnLineBatchResponse) Reset()         { *m = CheckOnLineBatchResponse{} }
func (m *CheckOnLineBatchResponse) String() string { return proto.CompactTextString(m) }
func (*CheckOnLineBatchResponse) ProtoMessage()    {}
func (*CheckOnLineBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_966f2ce1476fd764, []int{3}
}
func (m *CheckOnLineBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckOnLineBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckOnLineBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckOnLineBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckOnLineBatchResponse.Merge(m, src)
}
func (m *CheckOnLineBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckOnLineBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckOnLineBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckOnLineBatchResponse proto.InternalMessageInfo

func (m *CheckOnLineBatchResponse) GetList() []*OnLineStatus {
	if m != nil {
		return m.List
	}
	return nil
}

type OnLineStatus struct {
	UserId               uint32   `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	IsOnline             bool     `protobuf:"varint,2,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnLineStatus) Reset()         { *m = OnLineStatus{} }
func (m *OnLineStatus) String() string { return proto.CompactTextString(m) }
func (*OnLineStatus) ProtoMessage()    {}
func (*OnLineStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_966f2ce1476fd764, []int{4}
}
func (m *OnLineStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnLineStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnLineStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnLineStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnLineStatus.Merge(m, src)
}
func (m *OnLineStatus) XXX_Size() int {
	return m.Size()
}
func (m *OnLineStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_OnLineStatus.DiscardUnknown(m)
}

var xxx_messageInfo_OnLineStatus proto.InternalMessageInfo

func (m *OnLineStatus) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OnLineStatus) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func init() {
	proto.RegisterType((*CheckOnLineRequest)(nil), "med.xim.CheckOnLineRequest")
	proto.RegisterType((*CheckOnLineResponse)(nil), "med.xim.CheckOnLineResponse")
	proto.RegisterType((*CheckOnLineBatchRequest)(nil), "med.xim.CheckOnLineBatchRequest")
	proto.RegisterType((*CheckOnLineBatchResponse)(nil), "med.xim.CheckOnLineBatchResponse")
	proto.RegisterType((*OnLineStatus)(nil), "med.xim.OnLineStatus")
}

func init() {
	proto.RegisterFile("med-common/app/service/med-xim/api/im/user.proto", fileDescriptor_966f2ce1476fd764)
}

var fileDescriptor_966f2ce1476fd764 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x75, 0x81, 0x20, 0x0e, 0x92, 0xe8, 0x1a, 0xb5, 0x41, 0xd2, 0x60, 0x4f, 0x78, 0xb0, 0xab,
	0xf8, 0x07, 0x18, 0x0f, 0x12, 0x12, 0x92, 0x1a, 0x63, 0xf4, 0x56, 0xcb, 0x18, 0x36, 0xb2, 0xdb,
	0xba, 0xbb, 0x18, 0x7e, 0xca, 0xff, 0xf0, 0xe8, 0x27, 0x18, 0xbe, 0xc4, 0x50, 0x5a, 0x5c, 0x04,
	0xf5, 0x38, 0x6f, 0xde, 0xbc, 0x79, 0x6f, 0x76, 0xe1, 0x4c, 0xe0, 0xe0, 0x34, 0x8a, 0x85, 0x88,
	0x25, 0x0b, 0x93, 0x84, 0x69, 0x54, 0xaf, 0x3c, 0x42, 0x36, 0x83, 0x27, 0x5c, 0xb0, 0x30, 0xe1,
	0x8c, 0x0b, 0x36, 0xd6, 0xa8, 0xfc, 0x44, 0xc5, 0x26, 0xa6, 0x9b, 0x02, 0x07, 0xfe, 0x84, 0x0b,
	0xaf, 0x0b, 0xf4, 0x72, 0x88, 0xd1, 0x73, 0x5f, 0xf6, 0xb8, 0xc4, 0x00, 0x5f, 0xc6, 0xa8, 0x0d,
	0x3d, 0x80, 0xf2, 0x8c, 0x7c, 0x3d, 0x70, 0x48, 0x93, 0xb4, 0x6a, 0x41, 0x56, 0xd1, 0x06, 0x6c,
	0x29, 0x7c, 0x42, 0x85, 0x32, 0x42, 0xa7, 0x90, 0xb6, 0xbe, 0x01, 0xef, 0x1c, 0xf6, 0x96, 0xb4,
	0x74, 0x12, 0x4b, 0x8d, 0xb4, 0x0e, 0x15, 0xae, 0xfb, 0x72, 0xc4, 0x25, 0xa6, 0x72, 0x95, 0x60,
	0x51, 0x7b, 0x77, 0x70, 0x68, 0x8d, 0x74, 0x42, 0x13, 0x0d, 0x73, 0x0f, 0x2e, 0xc0, 0x7c, 0x6b,
	0x8f, 0x6b, 0xe3, 0x90, 0x66, 0xb1, 0x55, 0x0b, 0x2c, 0xe4, 0x1f, 0x2f, 0x57, 0xe0, 0xac, 0x0a,
	0x67, 0x86, 0x4e, 0xa0, 0x34, 0xca, 0x35, 0xab, 0xed, 0x7d, 0x3f, 0xbb, 0x85, 0x3f, 0xe7, 0xde,
	0x98, 0xd0, 0x8c, 0x75, 0x90, 0x52, 0xbc, 0x0e, 0x6c, 0xdb, 0xe8, 0xaf, 0x87, 0xb1, 0x33, 0x16,
	0x96, 0x33, 0xb6, 0xdf, 0x08, 0x94, 0x6e, 0x35, 0x2a, 0xda, 0x85, 0xaa, 0xe5, 0x89, 0x1e, 0x2d,
	0x16, 0xaf, 0xbe, 0x40, 0xbd, 0xb1, 0xbe, 0x39, 0x4f, 0xe0, 0x6d, 0xd0, 0x7b, 0xd8, 0xf9, 0x99,
	0x8f, 0x36, 0xd7, 0xcd, 0xd8, 0x37, 0xad, 0x1f, 0xff, 0xc1, 0xc8, 0xa5, 0x3b, 0xbb, 0xef, 0x53,
	0x97, 0x7c, 0x4c, 0x5d, 0xf2, 0x39, 0x75, 0xc9, 0x43, 0x71, 0xc2, 0xc5, 0x63, 0x39, 0xfd, 0x35,
	0x17, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x57, 0xed, 0x98, 0xb0, 0x69, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	// 检查用户是否在线
	CheckOnLine(ctx context.Context, in *CheckOnLineRequest, opts ...grpc.CallOption) (*CheckOnLineResponse, error)
	// 批量检查用户是否在线
	CheckOnLineBatch(ctx context.Context, in *CheckOnLineBatchRequest, opts ...grpc.CallOption) (*CheckOnLineBatchResponse, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) CheckOnLine(ctx context.Context, in *CheckOnLineRequest, opts ...grpc.CallOption) (*CheckOnLineResponse, error) {
	out := new(CheckOnLineResponse)
	err := c.cc.Invoke(ctx, "/med.xim.User/CheckOnLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckOnLineBatch(ctx context.Context, in *CheckOnLineBatchRequest, opts ...grpc.CallOption) (*CheckOnLineBatchResponse, error) {
	out := new(CheckOnLineBatchResponse)
	err := c.cc.Invoke(ctx, "/med.xim.User/CheckOnLineBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	// 检查用户是否在线
	CheckOnLine(context.Context, *CheckOnLineRequest) (*CheckOnLineResponse, error)
	// 批量检查用户是否在线
	CheckOnLineBatch(context.Context, *CheckOnLineBatchRequest) (*CheckOnLineBatchResponse, error)
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) CheckOnLine(ctx context.Context, req *CheckOnLineRequest) (*CheckOnLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOnLine not implemented")
}
func (*UnimplementedUserServer) CheckOnLineBatch(ctx context.Context, req *CheckOnLineBatchRequest) (*CheckOnLineBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOnLineBatch not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_CheckOnLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOnLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckOnLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.xim.User/CheckOnLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckOnLine(ctx, req.(*CheckOnLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckOnLineBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOnLineBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckOnLineBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.xim.User/CheckOnLineBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckOnLineBatch(ctx, req.(*CheckOnLineBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "med.xim.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckOnLine",
			Handler:    _User_CheckOnLine_Handler,
		},
		{
			MethodName: "CheckOnLineBatch",
			Handler:    _User_CheckOnLineBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "med-common/app/service/med-xim/api/im/user.proto",
}

func (m *CheckOnLineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckOnLineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckOnLineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reference != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Reference))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckOnLineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckOnLineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckOnLineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckOnLineBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckOnLineBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckOnLineBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reference != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Reference))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserIdList) > 0 {
		dAtA2 := make([]byte, len(m.UserIdList)*10)
		var j1 int
		for _, num := range m.UserIdList {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintUser(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckOnLineBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckOnLineBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckOnLineBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OnLineStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnLineStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnLineStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CheckOnLineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.Reference != 0 {
		n += 1 + sovUser(uint64(m.Reference))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckOnLineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsOnline {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckOnLineBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIdList) > 0 {
		l = 0
		for _, e := range m.UserIdList {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if m.Reference != 0 {
		n += 1 + sovUser(uint64(m.Reference))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckOnLineBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OnLineStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.IsOnline {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckOnLineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckOnLineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckOnLineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			m.Reference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reference |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckOnLineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckOnLineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckOnLineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckOnLineBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckOnLineBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckOnLineBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIdList = append(m.UserIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIdList) == 0 {
					m.UserIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIdList = append(m.UserIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdList", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			m.Reference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reference |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckOnLineBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckOnLineBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckOnLineBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &OnLineStatus{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnLineStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnLineStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnLineStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
