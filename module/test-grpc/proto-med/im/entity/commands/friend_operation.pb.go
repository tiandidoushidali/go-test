// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: med-common/app/service/med-xim/api/im/entity/commands/friend_operation.proto

package xim

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FriendOperation struct {
	Operation            int32    `protobuf:"varint,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Opposite             int64    `protobuf:"varint,2,opt,name=opposite,proto3" json:"opposite,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Reference            int32    `protobuf:"varint,4,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendOperation) Reset()         { *m = FriendOperation{} }
func (m *FriendOperation) String() string { return proto.CompactTextString(m) }
func (*FriendOperation) ProtoMessage()    {}
func (*FriendOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d93ad73caef9fb4, []int{0}
}
func (m *FriendOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendOperation.Merge(m, src)
}
func (m *FriendOperation) XXX_Size() int {
	return m.Size()
}
func (m *FriendOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendOperation.DiscardUnknown(m)
}

var xxx_messageInfo_FriendOperation proto.InternalMessageInfo

func (m *FriendOperation) GetOperation() int32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *FriendOperation) GetOpposite() int64 {
	if m != nil {
		return m.Opposite
	}
	return 0
}

func (m *FriendOperation) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *FriendOperation) GetReference() int32 {
	if m != nil {
		return m.Reference
	}
	return 0
}

func init() {
	proto.RegisterType((*FriendOperation)(nil), "med.xim.entity.commands.FriendOperation")
}

func init() {
	proto.RegisterFile("med-common/app/service/med-xim/api/im/entity/commands/friend_operation.proto", fileDescriptor_3d93ad73caef9fb4)
}

var fileDescriptor_3d93ad73caef9fb4 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xbd, 0x4a, 0xc5, 0x40,
	0x10, 0x85, 0x19, 0xe3, 0xdf, 0xdd, 0x46, 0x48, 0xe3, 0x22, 0x12, 0x82, 0x55, 0x10, 0xcc, 0x14,
	0xbe, 0x81, 0x85, 0x95, 0x20, 0xa4, 0xb4, 0x91, 0x98, 0xcc, 0x85, 0x29, 0x66, 0x66, 0xd9, 0x2c,
	0x12, 0x6b, 0x5f, 0xce, 0xd2, 0x47, 0x90, 0x3c, 0x89, 0xe4, 0x86, 0xc4, 0xca, 0xf2, 0x1c, 0xbe,
	0xef, 0x30, 0xe3, 0x9e, 0x84, 0xfa, 0xbb, 0xce, 0x44, 0x4c, 0xb1, 0x0d, 0x01, 0x07, 0x8a, 0xef,
	0xdc, 0x11, 0xce, 0xf5, 0xc8, 0x82, 0x6d, 0x60, 0x64, 0x41, 0xd2, 0xc4, 0xe9, 0x03, 0x67, 0xb0,
	0xd5, 0x7e, 0xc0, 0x7d, 0x64, 0xd2, 0xfe, 0xd5, 0x02, 0xc5, 0x36, 0xb1, 0x69, 0x1d, 0xa2, 0x25,
	0xcb, 0x2f, 0x85, 0xfa, 0x7a, 0x64, 0xa9, 0x17, 0xbe, 0x5e, 0xf9, 0x9b, 0x4f, 0x70, 0x17, 0x8f,
	0x07, 0xe7, 0x79, 0x55, 0xf2, 0x6b, 0xb7, 0xdb, 0x7c, 0x0f, 0x25, 0x54, 0x27, 0xcd, 0x5f, 0x91,
	0x5f, 0xb9, 0x73, 0x0b, 0xc1, 0x06, 0x4e, 0xe4, 0x8f, 0x4a, 0xa8, 0xb2, 0x66, 0xcb, 0xb9, 0x77,
	0x67, 0x9d, 0x69, 0x22, 0x4d, 0x3e, 0x2b, 0xa1, 0xda, 0x35, 0x6b, 0x9c, 0x37, 0x23, 0xed, 0x29,
	0x92, 0x76, 0xe4, 0x8f, 0x97, 0xcd, 0xad, 0x78, 0xb8, 0xfd, 0x9a, 0x0a, 0xf8, 0x9e, 0x0a, 0xf8,
	0x99, 0x0a, 0x70, 0xff, 0x1d, 0xfb, 0x92, 0x8d, 0x2c, 0x6f, 0xa7, 0x87, 0x8f, 0xee, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xbc, 0xb5, 0x81, 0x1a, 0x21, 0x01, 0x00, 0x00,
}

func (m *FriendOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reference != 0 {
		i = encodeVarintFriendOperation(dAtA, i, uint64(m.Reference))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintFriendOperation(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Opposite != 0 {
		i = encodeVarintFriendOperation(dAtA, i, uint64(m.Opposite))
		i--
		dAtA[i] = 0x10
	}
	if m.Operation != 0 {
		i = encodeVarintFriendOperation(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFriendOperation(dAtA []byte, offset int, v uint64) int {
	offset -= sovFriendOperation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FriendOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != 0 {
		n += 1 + sovFriendOperation(uint64(m.Operation))
	}
	if m.Opposite != 0 {
		n += 1 + sovFriendOperation(uint64(m.Opposite))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovFriendOperation(uint64(l))
	}
	if m.Reference != 0 {
		n += 1 + sovFriendOperation(uint64(m.Reference))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFriendOperation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFriendOperation(x uint64) (n int) {
	return sovFriendOperation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FriendOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriendOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opposite", wireType)
			}
			m.Opposite = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opposite |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriendOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriendOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			m.Reference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reference |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriendOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriendOperation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFriendOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFriendOperation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFriendOperation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriendOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriendOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFriendOperation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFriendOperation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFriendOperation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFriendOperation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFriendOperation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFriendOperation = fmt.Errorf("proto: unexpected end of group")
)
