// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: med-common/app/service/med-xim/api/im/entity/user.proto

package xim

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 群组用户信息数据结构
type User struct {
	UserId               uint32   `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sex                  int32    `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
	Avatar               string   `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Type                 int32    `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Hospital             string   `protobuf:"bytes,6,opt,name=hospital,proto3" json:"hospital,omitempty"`
	HospitalId           uint32   `protobuf:"varint,7,opt,name=hospitalId,proto3" json:"hospitalId,omitempty"`
	SectionId            int32    `protobuf:"varint,8,opt,name=sectionId,proto3" json:"sectionId,omitempty"`
	SectionName          string   `protobuf:"bytes,9,opt,name=sectionName,proto3" json:"sectionName,omitempty"`
	TitleId              int32    `protobuf:"varint,10,opt,name=titleId,proto3" json:"titleId,omitempty"`
	TitleName            string   `protobuf:"bytes,11,opt,name=titleName,proto3" json:"titleName,omitempty"`
	IsSurgeon            int32    `protobuf:"varint,12,opt,name=isSurgeon,proto3" json:"isSurgeon,omitempty"`
	UserPlatform         string   `protobuf:"bytes,13,opt,name=userPlatform,proto3" json:"userPlatform,omitempty"`
	JumpUrl              string   `protobuf:"bytes,14,opt,name=jumpUrl,proto3" json:"jumpUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_6810a2ba0094a42e, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *User) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *User) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *User) GetHospital() string {
	if m != nil {
		return m.Hospital
	}
	return ""
}

func (m *User) GetHospitalId() uint32 {
	if m != nil {
		return m.HospitalId
	}
	return 0
}

func (m *User) GetSectionId() int32 {
	if m != nil {
		return m.SectionId
	}
	return 0
}

func (m *User) GetSectionName() string {
	if m != nil {
		return m.SectionName
	}
	return ""
}

func (m *User) GetTitleId() int32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

func (m *User) GetTitleName() string {
	if m != nil {
		return m.TitleName
	}
	return ""
}

func (m *User) GetIsSurgeon() int32 {
	if m != nil {
		return m.IsSurgeon
	}
	return 0
}

func (m *User) GetUserPlatform() string {
	if m != nil {
		return m.UserPlatform
	}
	return ""
}

func (m *User) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "med.xim.entity.User")
}

func init() {
	proto.RegisterFile("med-common/app/service/med-xim/api/im/entity/user.proto", fileDescriptor_6810a2ba0094a42e)
}

var fileDescriptor_6810a2ba0094a42e = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbb, 0x4e, 0x33, 0x31,
	0x10, 0x85, 0xb5, 0xff, 0xe6, 0xea, 0x5c, 0xf4, 0xe3, 0x02, 0x8d, 0x10, 0x5a, 0xad, 0x52, 0xa5,
	0x21, 0x2e, 0x28, 0xe8, 0xe9, 0xb6, 0x41, 0x28, 0x28, 0x0d, 0x9d, 0xc9, 0x0e, 0x60, 0xb4, 0x5e,
	0x5b, 0xb6, 0x13, 0x6d, 0x3a, 0x1e, 0x8f, 0x92, 0x47, 0x40, 0x79, 0x12, 0xe4, 0xc9, 0x95, 0xee,
	0x9c, 0x6f, 0xce, 0x19, 0x8f, 0x76, 0xd9, 0x9d, 0xc6, 0xf2, 0x66, 0x69, 0xb4, 0x36, 0xb5, 0x90,
	0xd6, 0x0a, 0x8f, 0x6e, 0xad, 0x96, 0x28, 0x22, 0x6e, 0x94, 0x16, 0xd2, 0x2a, 0xa1, 0xb4, 0xc0,
	0x3a, 0xa8, 0xb0, 0x11, 0x2b, 0x8f, 0x6e, 0x66, 0x9d, 0x09, 0x86, 0x8f, 0x35, 0x96, 0xb3, 0x46,
	0xe9, 0xd9, 0x6e, 0x34, 0xf9, 0x4c, 0x59, 0x6b, 0xe1, 0xd1, 0xf1, 0x4b, 0xd6, 0x89, 0xb1, 0xa2,
	0x84, 0x24, 0x4f, 0xa6, 0xa3, 0xf9, 0xde, 0x71, 0xce, 0x5a, 0xb5, 0xd4, 0x08, 0xff, 0xf2, 0x64,
	0xda, 0x9f, 0x93, 0xe6, 0xff, 0x59, 0xea, 0xb1, 0x81, 0x34, 0x4f, 0xa6, 0xed, 0x79, 0x94, 0xb1,
	0x2d, 0xd7, 0x32, 0x48, 0x07, 0x2d, 0xca, 0xed, 0x5d, 0x6c, 0x87, 0x8d, 0x45, 0x68, 0x53, 0x94,
	0x34, 0xbf, 0x62, 0xbd, 0x77, 0xe3, 0xad, 0x0a, 0xb2, 0x82, 0x0e, 0xa5, 0x8f, 0x9e, 0x67, 0x8c,
	0x1d, 0x74, 0x51, 0x42, 0x97, 0x2e, 0x39, 0x23, 0xfc, 0x9a, 0xf5, 0x3d, 0x2e, 0x83, 0x32, 0x75,
	0x51, 0x42, 0x8f, 0x96, 0x9e, 0x00, 0xcf, 0xd9, 0x60, 0x6f, 0x1e, 0xe2, 0xc9, 0x7d, 0x5a, 0x7e,
	0x8e, 0x38, 0xb0, 0x6e, 0x50, 0xa1, 0xc2, 0xa2, 0x04, 0x46, 0xed, 0x83, 0x8d, 0x9b, 0x49, 0x52,
	0x73, 0x40, 0xcd, 0x13, 0x88, 0x53, 0xe5, 0x9f, 0x56, 0xee, 0x0d, 0x4d, 0x0d, 0xc3, 0xdd, 0xbb,
	0x47, 0xc0, 0x27, 0x6c, 0x18, 0xbf, 0xd6, 0x63, 0x25, 0xc3, 0xab, 0x71, 0x1a, 0x46, 0x54, 0xff,
	0xc3, 0xe2, 0xcb, 0x1f, 0x2b, 0x6d, 0x17, 0xae, 0x82, 0x31, 0x8d, 0x0f, 0xf6, 0xfe, 0xe2, 0x6b,
	0x9b, 0x25, 0xdf, 0xdb, 0x2c, 0xf9, 0xd9, 0x66, 0xc9, 0x73, 0xda, 0x28, 0xfd, 0xd2, 0xa1, 0x9f,
	0x75, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xfd, 0x9e, 0xb5, 0xe7, 0x01, 0x00, 0x00,
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintUser(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.UserPlatform) > 0 {
		i -= len(m.UserPlatform)
		copy(dAtA[i:], m.UserPlatform)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserPlatform)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsSurgeon != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.IsSurgeon))
		i--
		dAtA[i] = 0x60
	}
	if len(m.TitleName) > 0 {
		i -= len(m.TitleName)
		copy(dAtA[i:], m.TitleName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.TitleName)))
		i--
		dAtA[i] = 0x5a
	}
	if m.TitleId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.TitleId))
		i--
		dAtA[i] = 0x50
	}
	if len(m.SectionName) > 0 {
		i -= len(m.SectionName)
		copy(dAtA[i:], m.SectionName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.SectionName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SectionId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.SectionId))
		i--
		dAtA[i] = 0x40
	}
	if m.HospitalId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.HospitalId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Hospital) > 0 {
		i -= len(m.Hospital)
		copy(dAtA[i:], m.Hospital)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Hospital)))
		i--
		dAtA[i] = 0x32
	}
	if m.Type != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x22
	}
	if m.Sex != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovUser(uint64(m.Sex))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovUser(uint64(m.Type))
	}
	l = len(m.Hospital)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.HospitalId != 0 {
		n += 1 + sovUser(uint64(m.HospitalId))
	}
	if m.SectionId != 0 {
		n += 1 + sovUser(uint64(m.SectionId))
	}
	l = len(m.SectionName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.TitleId != 0 {
		n += 1 + sovUser(uint64(m.TitleId))
	}
	l = len(m.TitleName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.IsSurgeon != 0 {
		n += 1 + sovUser(uint64(m.IsSurgeon))
	}
	l = len(m.UserPlatform)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hospital", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hospital = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HospitalId", wireType)
			}
			m.HospitalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HospitalId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionId", wireType)
			}
			m.SectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SectionId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSurgeon", wireType)
			}
			m.IsSurgeon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSurgeon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPlatform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPlatform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
