// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: med-common/app/service/med-xim/api/im/entity/misc/group.proto

package xim

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Group struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Avatar               []string `protobuf:"bytes,4,rep,name=avatar,proto3" json:"avatar,omitempty"`
	Amount               int32    `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Owner                int64    `protobuf:"varint,6,opt,name=owner,proto3" json:"owner,omitempty"`
	BusinessType         int32    `protobuf:"varint,7,opt,name=businessType,proto3" json:"businessType,omitempty"`
	BusinessId           int64    `protobuf:"varint,8,opt,name=businessId,proto3" json:"businessId,omitempty"`
	AvatarUrl            string   `protobuf:"bytes,9,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	IsPublic             int32    `protobuf:"varint,10,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	IsForbidden          int32    `protobuf:"varint,11,opt,name=isForbidden,proto3" json:"isForbidden,omitempty"`
	IsWechat             int32    `protobuf:"varint,12,opt,name=isWechat,proto3" json:"isWechat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_12e97657b8a25459, []int{0}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetAvatar() []string {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *Group) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Group) GetOwner() int64 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *Group) GetBusinessType() int32 {
	if m != nil {
		return m.BusinessType
	}
	return 0
}

func (m *Group) GetBusinessId() int64 {
	if m != nil {
		return m.BusinessId
	}
	return 0
}

func (m *Group) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *Group) GetIsPublic() int32 {
	if m != nil {
		return m.IsPublic
	}
	return 0
}

func (m *Group) GetIsForbidden() int32 {
	if m != nil {
		return m.IsForbidden
	}
	return 0
}

func (m *Group) GetIsWechat() int32 {
	if m != nil {
		return m.IsWechat
	}
	return 0
}

func init() {
	proto.RegisterType((*Group)(nil), "med.xim.entity.misc.Group")
}

func init() {
	proto.RegisterFile("med-common/app/service/med-xim/api/im/entity/misc/group.proto", fileDescriptor_12e97657b8a25459)
}

var fileDescriptor_12e97657b8a25459 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0xf3, 0x30,
	0x18, 0xc7, 0xc9, 0xba, 0xee, 0x5d, 0x9f, 0x8d, 0x17, 0x8c, 0x22, 0x41, 0xa4, 0x94, 0x9d, 0x7a,
	0xb1, 0x39, 0x78, 0xf6, 0xe2, 0x41, 0xf1, 0x26, 0x45, 0x11, 0xbc, 0xa5, 0x4d, 0xd0, 0x07, 0x96,
	0xa4, 0x24, 0xed, 0xdc, 0x3e, 0x94, 0xdf, 0xc3, 0xa3, 0x1f, 0x41, 0xf6, 0x49, 0xa4, 0xe9, 0xa6,
	0xf3, 0x96, 0xdf, 0x2f, 0xff, 0xff, 0x93, 0xf0, 0xc0, 0x95, 0x56, 0xf2, 0xa2, 0xb6, 0x5a, 0x5b,
	0xc3, 0x45, 0xd3, 0x70, 0xaf, 0xdc, 0x0a, 0x6b, 0xc5, 0x7b, 0xbd, 0x46, 0xcd, 0x45, 0x83, 0x1c,
	0x35, 0x57, 0xa6, 0xc5, 0x76, 0xc3, 0x35, 0xfa, 0x9a, 0xbf, 0x38, 0xdb, 0x35, 0x45, 0xe3, 0x6c,
	0x6b, 0xe9, 0xb1, 0x56, 0xb2, 0x58, 0xa3, 0x2e, 0x86, 0x40, 0xd1, 0x07, 0x16, 0xef, 0x23, 0x88,
	0x6f, 0xfb, 0x10, 0xfd, 0x0f, 0x23, 0x94, 0x8c, 0x64, 0x24, 0x8f, 0xca, 0x11, 0x4a, 0x4a, 0x61,
	0x6c, 0x84, 0x56, 0x2c, 0xca, 0x48, 0x9e, 0x94, 0xe1, 0x4c, 0x4f, 0x61, 0x22, 0x56, 0xa2, 0x15,
	0x8e, 0x8d, 0xb3, 0x28, 0x4f, 0xca, 0x1d, 0x05, 0xaf, 0x6d, 0x67, 0x5a, 0x16, 0x67, 0x24, 0x8f,
	0xcb, 0x1d, 0xd1, 0x13, 0x88, 0xed, 0x9b, 0x51, 0x8e, 0x4d, 0xc2, 0xd8, 0x01, 0xe8, 0x02, 0xe6,
	0x55, 0xe7, 0xd1, 0x28, 0xef, 0x1f, 0x36, 0x8d, 0x62, 0xff, 0x42, 0xe7, 0x8f, 0xa3, 0x29, 0xc0,
	0x9e, 0xef, 0x24, 0x9b, 0x86, 0xfa, 0x81, 0xa1, 0xe7, 0x90, 0x0c, 0x6f, 0x3f, 0xba, 0x25, 0x4b,
	0xc2, 0x17, 0x7f, 0x05, 0x3d, 0x83, 0x29, 0xfa, 0xfb, 0xae, 0x5a, 0x62, 0xcd, 0x20, 0x4c, 0xff,
	0x61, 0x9a, 0xc1, 0x0c, 0xfd, 0x8d, 0x75, 0x15, 0x4a, 0xa9, 0x0c, 0x9b, 0x85, 0xeb, 0x43, 0x35,
	0xb4, 0x9f, 0x54, 0xfd, 0x2a, 0x5a, 0x36, 0xdf, 0xb7, 0x07, 0xbe, 0x3e, 0xfa, 0xd8, 0xa6, 0xe4,
	0x73, 0x9b, 0x92, 0xaf, 0x6d, 0x4a, 0x9e, 0xa3, 0x35, 0xea, 0x6a, 0x12, 0xd6, 0x7b, 0xf9, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0xd5, 0xb6, 0xf0, 0x8f, 0x9f, 0x01, 0x00, 0x00,
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsWechat != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.IsWechat))
		i--
		dAtA[i] = 0x60
	}
	if m.IsForbidden != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.IsForbidden))
		i--
		dAtA[i] = 0x58
	}
	if m.IsPublic != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.IsPublic))
		i--
		dAtA[i] = 0x50
	}
	if len(m.AvatarUrl) > 0 {
		i -= len(m.AvatarUrl)
		copy(dAtA[i:], m.AvatarUrl)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.AvatarUrl)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BusinessId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.BusinessId))
		i--
		dAtA[i] = 0x40
	}
	if m.BusinessType != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.BusinessType))
		i--
		dAtA[i] = 0x38
	}
	if m.Owner != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Owner))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Avatar) > 0 {
		for iNdEx := len(m.Avatar) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Avatar[iNdEx])
			copy(dAtA[i:], m.Avatar[iNdEx])
			i = encodeVarintGroup(dAtA, i, uint64(len(m.Avatar[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGroup(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if len(m.Avatar) > 0 {
		for _, s := range m.Avatar {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if m.Amount != 0 {
		n += 1 + sovGroup(uint64(m.Amount))
	}
	if m.Owner != 0 {
		n += 1 + sovGroup(uint64(m.Owner))
	}
	if m.BusinessType != 0 {
		n += 1 + sovGroup(uint64(m.BusinessType))
	}
	if m.BusinessId != 0 {
		n += 1 + sovGroup(uint64(m.BusinessId))
	}
	l = len(m.AvatarUrl)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.IsPublic != 0 {
		n += 1 + sovGroup(uint64(m.IsPublic))
	}
	if m.IsForbidden != 0 {
		n += 1 + sovGroup(uint64(m.IsForbidden))
	}
	if m.IsWechat != 0 {
		n += 1 + sovGroup(uint64(m.IsWechat))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = append(m.Avatar, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessType", wireType)
			}
			m.BusinessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessId", wireType)
			}
			m.BusinessId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			m.IsPublic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPublic |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsForbidden", wireType)
			}
			m.IsForbidden = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsForbidden |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWechat", wireType)
			}
			m.IsWechat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsWechat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroup = fmt.Errorf("proto: unexpected end of group")
)
