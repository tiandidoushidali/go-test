// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: med-common/app/service/med-xim/api/im/entity/message.proto

package xim

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	commands "go-test/module/test-grpc/proto-med/im/entity/commands"
	misc "go-test/module/test-grpc/proto-med/im/entity/misc"
	types "go-test/module/test-grpc/proto-med/im/entity/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 参考：https://git.medlinker.com/medlinker/im-business-proto
type Message struct {
	Id    uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IdStr string     `protobuf:"bytes,20,opt,name=idStr,proto3" json:"idStr,omitempty"`
	From  *misc.User `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Types that are valid to be assigned to To:
	//	*Message_User
	//	*Message_Group
	To isMessage_To `protobuf_oneof:"to"`
	// Types that are valid to be assigned to Data:
	//	*Message_Text
	//	*Message_Voice
	//	*Message_Card
	//	*Message_Image
	//	*Message_Location
	//	*Message_Notice
	//	*Message_BusinessCard
	//	*Message_Json
	//	*Message_Notify
	//	*Message_Login
	//	*Message_Withdraw
	//	*Message_GroupOperation
	//	*Message_FriendOperation
	//	*Message_Video
	Data                 isMessage_Data  `protobuf_oneof:"data"`
	Ext                  string          `protobuf:"bytes,19,opt,name=ext,proto3" json:"ext,omitempty"`
	IsShow               map[string]bool `protobuf:"bytes,22,rep,name=isShow,proto3" json:"isShow,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e34eafb4184148d, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_To interface {
	isMessage_To()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isMessage_Data interface {
	isMessage_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_User struct {
	User *misc.User `protobuf:"bytes,3,opt,name=user,proto3,oneof" json:"user,omitempty"`
}
type Message_Group struct {
	Group *misc.Group `protobuf:"bytes,4,opt,name=group,proto3,oneof" json:"group,omitempty"`
}
type Message_Text struct {
	Text *types.Text `protobuf:"bytes,5,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type Message_Voice struct {
	Voice *types.Voice `protobuf:"bytes,6,opt,name=voice,proto3,oneof" json:"voice,omitempty"`
}
type Message_Card struct {
	Card *types.Card `protobuf:"bytes,7,opt,name=card,proto3,oneof" json:"card,omitempty"`
}
type Message_Image struct {
	Image *types.Image `protobuf:"bytes,8,opt,name=image,proto3,oneof" json:"image,omitempty"`
}
type Message_Location struct {
	Location *types.Location `protobuf:"bytes,9,opt,name=location,proto3,oneof" json:"location,omitempty"`
}
type Message_Notice struct {
	Notice *types.Notice `protobuf:"bytes,10,opt,name=notice,proto3,oneof" json:"notice,omitempty"`
}
type Message_BusinessCard struct {
	BusinessCard *types.BusinessCard `protobuf:"bytes,11,opt,name=businessCard,proto3,oneof" json:"businessCard,omitempty"`
}
type Message_Json struct {
	Json *types.Json `protobuf:"bytes,12,opt,name=json,proto3,oneof" json:"json,omitempty"`
}
type Message_Notify struct {
	Notify *types.BusinessNotify `protobuf:"bytes,13,opt,name=notify,proto3,oneof" json:"notify,omitempty"`
}
type Message_Login struct {
	Login *commands.Login `protobuf:"bytes,15,opt,name=login,proto3,oneof" json:"login,omitempty"`
}
type Message_Withdraw struct {
	Withdraw *commands.Withdraw `protobuf:"bytes,16,opt,name=withdraw,proto3,oneof" json:"withdraw,omitempty"`
}
type Message_GroupOperation struct {
	GroupOperation *commands.GroupOperation `protobuf:"bytes,17,opt,name=groupOperation,proto3,oneof" json:"groupOperation,omitempty"`
}
type Message_FriendOperation struct {
	FriendOperation *commands.FriendOperation `protobuf:"bytes,18,opt,name=friendOperation,proto3,oneof" json:"friendOperation,omitempty"`
}
type Message_Video struct {
	Video *types.Video `protobuf:"bytes,21,opt,name=video,proto3,oneof" json:"video,omitempty"`
}

func (*Message_User) isMessage_To()              {}
func (*Message_Group) isMessage_To()             {}
func (*Message_Text) isMessage_Data()            {}
func (*Message_Voice) isMessage_Data()           {}
func (*Message_Card) isMessage_Data()            {}
func (*Message_Image) isMessage_Data()           {}
func (*Message_Location) isMessage_Data()        {}
func (*Message_Notice) isMessage_Data()          {}
func (*Message_BusinessCard) isMessage_Data()    {}
func (*Message_Json) isMessage_Data()            {}
func (*Message_Notify) isMessage_Data()          {}
func (*Message_Login) isMessage_Data()           {}
func (*Message_Withdraw) isMessage_Data()        {}
func (*Message_GroupOperation) isMessage_Data()  {}
func (*Message_FriendOperation) isMessage_Data() {}
func (*Message_Video) isMessage_Data()           {}

func (m *Message) GetTo() isMessage_To {
	if m != nil {
		return m.To
	}
	return nil
}
func (m *Message) GetData() isMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Message) GetIdStr() string {
	if m != nil {
		return m.IdStr
	}
	return ""
}

func (m *Message) GetFrom() *misc.User {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetUser() *misc.User {
	if x, ok := m.GetTo().(*Message_User); ok {
		return x.User
	}
	return nil
}

func (m *Message) GetGroup() *misc.Group {
	if x, ok := m.GetTo().(*Message_Group); ok {
		return x.Group
	}
	return nil
}

func (m *Message) GetText() *types.Text {
	if x, ok := m.GetData().(*Message_Text); ok {
		return x.Text
	}
	return nil
}

func (m *Message) GetVoice() *types.Voice {
	if x, ok := m.GetData().(*Message_Voice); ok {
		return x.Voice
	}
	return nil
}

func (m *Message) GetCard() *types.Card {
	if x, ok := m.GetData().(*Message_Card); ok {
		return x.Card
	}
	return nil
}

func (m *Message) GetImage() *types.Image {
	if x, ok := m.GetData().(*Message_Image); ok {
		return x.Image
	}
	return nil
}

func (m *Message) GetLocation() *types.Location {
	if x, ok := m.GetData().(*Message_Location); ok {
		return x.Location
	}
	return nil
}

func (m *Message) GetNotice() *types.Notice {
	if x, ok := m.GetData().(*Message_Notice); ok {
		return x.Notice
	}
	return nil
}

func (m *Message) GetBusinessCard() *types.BusinessCard {
	if x, ok := m.GetData().(*Message_BusinessCard); ok {
		return x.BusinessCard
	}
	return nil
}

func (m *Message) GetJson() *types.Json {
	if x, ok := m.GetData().(*Message_Json); ok {
		return x.Json
	}
	return nil
}

func (m *Message) GetNotify() *types.BusinessNotify {
	if x, ok := m.GetData().(*Message_Notify); ok {
		return x.Notify
	}
	return nil
}

func (m *Message) GetLogin() *commands.Login {
	if x, ok := m.GetData().(*Message_Login); ok {
		return x.Login
	}
	return nil
}

func (m *Message) GetWithdraw() *commands.Withdraw {
	if x, ok := m.GetData().(*Message_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (m *Message) GetGroupOperation() *commands.GroupOperation {
	if x, ok := m.GetData().(*Message_GroupOperation); ok {
		return x.GroupOperation
	}
	return nil
}

func (m *Message) GetFriendOperation() *commands.FriendOperation {
	if x, ok := m.GetData().(*Message_FriendOperation); ok {
		return x.FriendOperation
	}
	return nil
}

func (m *Message) GetVideo() *types.Video {
	if x, ok := m.GetData().(*Message_Video); ok {
		return x.Video
	}
	return nil
}

func (m *Message) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *Message) GetIsShow() map[string]bool {
	if m != nil {
		return m.IsShow
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_User)(nil),
		(*Message_Group)(nil),
		(*Message_Text)(nil),
		(*Message_Voice)(nil),
		(*Message_Card)(nil),
		(*Message_Image)(nil),
		(*Message_Location)(nil),
		(*Message_Notice)(nil),
		(*Message_BusinessCard)(nil),
		(*Message_Json)(nil),
		(*Message_Notify)(nil),
		(*Message_Login)(nil),
		(*Message_Withdraw)(nil),
		(*Message_GroupOperation)(nil),
		(*Message_FriendOperation)(nil),
		(*Message_Video)(nil),
	}
}

func init() {
	proto.RegisterType((*Message)(nil), "med.xim.entity.Message")
	proto.RegisterMapType((map[string]bool)(nil), "med.xim.entity.Message.IsShowEntry")
}

func init() {
	proto.RegisterFile("med-common/app/service/med-xim/api/im/entity/message.proto", fileDescriptor_6e34eafb4184148d)
}

var fileDescriptor_6e34eafb4184148d = []byte{
	// 728 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xef, 0x4e, 0x13, 0x4d,
	0x14, 0xc6, 0x99, 0xfe, 0xa3, 0x9d, 0xf2, 0xf2, 0x67, 0x5e, 0xde, 0x37, 0x63, 0x35, 0x4d, 0x45,
	0x13, 0xfb, 0x85, 0x5d, 0x03, 0x09, 0x51, 0x44, 0x88, 0x55, 0x61, 0x51, 0xc4, 0x38, 0xa0, 0x26,
	0x7e, 0x21, 0x4b, 0x77, 0x0a, 0xa3, 0xec, 0x6e, 0xb3, 0x3b, 0x85, 0xf6, 0xb6, 0xbc, 0x0a, 0x3f,
	0x7a, 0x09, 0x86, 0x2b, 0x31, 0xe7, 0xec, 0x6e, 0x6d, 0x9b, 0x52, 0xc3, 0xf6, 0xdb, 0x76, 0x79,
	0x7e, 0xcf, 0x99, 0x39, 0x7b, 0xce, 0x03, 0xdd, 0x74, 0xa5, 0xb3, 0xda, 0xf4, 0x5d, 0xd7, 0xf7,
	0x4c, 0xbb, 0xdd, 0x36, 0x43, 0x19, 0x5c, 0xaa, 0xa6, 0x34, 0xe1, 0x75, 0x57, 0xb9, 0xa6, 0xdd,
	0x56, 0xa6, 0x72, 0x4d, 0xe9, 0x69, 0xa5, 0x7b, 0xa6, 0x2b, 0xc3, 0xd0, 0x3e, 0x93, 0x46, 0x3b,
	0xf0, 0xb5, 0xcf, 0xe6, 0x5d, 0xe9, 0x18, 0x5d, 0xe5, 0x1a, 0xd1, 0x5f, 0x2b, 0x5b, 0xb7, 0xf3,
	0x52, 0x61, 0xd3, 0xec, 0x84, 0x32, 0x88, 0xdc, 0x2a, 0xcf, 0x6f, 0x4f, 0x9f, 0x05, 0x7e, 0xa7,
	0x9d, 0x0a, 0xd7, 0xbd, 0xb6, 0x0c, 0x4d, 0x2d, 0xbb, 0x3a, 0xc6, 0xb7, 0x53, 0xe0, 0x97, 0xbe,
	0x6a, 0xca, 0x69, 0x78, 0xe5, 0x48, 0x3f, 0xe6, 0x5f, 0xa4, 0xe0, 0x2f, 0xfc, 0xa6, 0xad, 0x95,
	0xef, 0x4d, 0xd1, 0x81, 0xa6, 0x1d, 0x38, 0x31, 0xbe, 0x9b, 0x02, 0x3f, 0xed, 0x84, 0xca, 0x93,
	0x61, 0x78, 0x32, 0xe0, 0x63, 0x4d, 0xe3, 0xe3, 0xf9, 0x5a, 0xb5, 0x7a, 0x53, 0x5c, 0xe8, 0x6b,
	0xd8, 0xef, 0x47, 0x9a, 0x4f, 0xa2, 0xdc, 0xfe, 0x78, 0x57, 0x76, 0x52, 0xf0, 0x70, 0xfe, 0xfe,
	0x4c, 0xdc, 0xee, 0x9b, 0x82, 0xd0, 0xf6, 0x1c, 0xf8, 0xac, 0x67, 0x2a, 0xb9, 0xc3, 0xab, 0x74,
	0x16, 0x57, 0x4a, 0x9f, 0x3b, 0x81, 0x7d, 0x15, 0xbb, 0xbc, 0x4d, 0xe7, 0x82, 0xeb, 0x75, 0xe2,
	0xb7, 0x65, 0x30, 0x38, 0x66, 0x07, 0xe9, 0xcc, 0x5a, 0x81, 0x92, 0x9e, 0x33, 0xea, 0xb6, 0xf2,
	0xbd, 0x44, 0x67, 0xdf, 0x45, 0xa9, 0xc2, 0xe6, 0x69, 0x46, 0x39, 0x9c, 0xd4, 0x48, 0x3d, 0x27,
	0x32, 0xca, 0x61, 0xcb, 0x34, 0xaf, 0x9c, 0x23, 0x1d, 0xf0, 0xe5, 0x1a, 0xa9, 0x97, 0x44, 0xf4,
	0x83, 0xad, 0xd2, 0x5c, 0x2b, 0xf0, 0x5d, 0x9e, 0xa9, 0x91, 0x7a, 0x79, 0xed, 0x8e, 0x31, 0x1c,
	0x42, 0x06, 0x04, 0x83, 0xf1, 0x31, 0x94, 0x81, 0x40, 0x19, 0x33, 0x69, 0x0e, 0x42, 0x86, 0x67,
	0xff, 0x22, 0xb7, 0x66, 0x04, 0x0a, 0xd9, 0x1a, 0xcd, 0xe3, 0xc5, 0x79, 0x0e, 0x89, 0xca, 0x58,
	0x62, 0x0f, 0x14, 0xd6, 0x8c, 0x88, 0xa4, 0xec, 0x31, 0xcd, 0x41, 0x96, 0xf0, 0xfc, 0x78, 0x04,
	0x67, 0xc3, 0x38, 0x96, 0x5d, 0x6d, 0x11, 0x81, 0x4a, 0xb6, 0x4e, 0xf3, 0x18, 0x1f, 0xbc, 0x80,
	0xc8, 0xdd, 0xf1, 0xc8, 0x27, 0x90, 0x58, 0x44, 0x44, 0x5a, 0x28, 0x03, 0x8b, 0xc6, 0x67, 0x27,
	0x95, 0x79, 0x69, 0x07, 0x0e, 0x94, 0x01, 0x25, 0x94, 0xc1, 0x91, 0xe6, 0xc5, 0x49, 0x65, 0xf6,
	0x41, 0x02, 0x65, 0x50, 0xcb, 0xb6, 0x68, 0x31, 0x89, 0x16, 0x5e, 0x42, 0xae, 0x3a, 0x9e, 0x3b,
	0x88, 0x55, 0x16, 0x11, 0x7d, 0x82, 0x6d, 0xd0, 0x42, 0xb4, 0x05, 0x9c, 0x22, 0x7b, 0x6f, 0x3c,
	0x7b, 0x88, 0x1a, 0x8b, 0x88, 0x58, 0xcd, 0x2c, 0x3a, 0x97, 0xc4, 0x00, 0x5c, 0x81, 0x97, 0x91,
	0x5e, 0x19, 0x4f, 0x37, 0x06, 0x94, 0x16, 0x11, 0x43, 0x24, 0xb4, 0x09, 0x62, 0x80, 0xcf, 0x4d,
	0x6a, 0xd3, 0x9b, 0x10, 0xcf, 0x8d, 0x4a, 0xb6, 0x1d, 0x9d, 0xb9, 0xd5, 0xe3, 0xff, 0x20, 0xf3,
	0x70, 0x72, 0xd5, 0x43, 0xd4, 0x26, 0x67, 0x6f, 0xf5, 0xd8, 0x06, 0xcd, 0xe3, 0xd6, 0xf2, 0x85,
	0xf1, 0xed, 0x4a, 0xb6, 0xc0, 0x38, 0x00, 0x15, 0x74, 0x1a, 0xe5, 0x6c, 0x87, 0x16, 0x93, 0x55,
	0xe5, 0x8b, 0x88, 0xde, 0xbf, 0x11, 0xfd, 0x1c, 0x0b, 0xa1, 0xd9, 0x09, 0xc4, 0x3e, 0xd0, 0x79,
	0x9c, 0xc0, 0xf7, 0xc9, 0x5a, 0xf1, 0x25, 0xb4, 0x79, 0x74, 0xa3, 0xcd, 0xde, 0x90, 0xdc, 0x22,
	0x62, 0xc4, 0x80, 0x1d, 0xd3, 0x85, 0x68, 0x57, 0xff, 0x78, 0x32, 0xf4, 0xac, 0xdf, 0xe8, 0xb9,
	0x3b, 0xac, 0xb7, 0x88, 0x18, 0xb5, 0xc0, 0x79, 0x87, 0x7f, 0x77, 0xfc, 0xbf, 0x89, 0xf3, 0x0e,
	0x12, 0x9c, 0x77, 0x78, 0x60, 0x8b, 0x34, 0x0b, 0x5b, 0xf5, 0x2f, 0xae, 0x3f, 0x3c, 0xb2, 0x67,
	0xb4, 0xa0, 0xc2, 0xa3, 0x73, 0xff, 0x8a, 0xff, 0x5f, 0xcb, 0xd6, 0xcb, 0x6b, 0x0f, 0x46, 0x7d,
	0xe2, 0x2c, 0x31, 0xf6, 0x51, 0xf5, 0xda, 0xd3, 0x41, 0x4f, 0xc4, 0x48, 0xe5, 0x29, 0x2d, 0x0f,
	0xbc, 0x06, 0xf7, 0x6f, 0xb2, 0x87, 0x79, 0x53, 0x12, 0xf0, 0x08, 0x81, 0x73, 0x69, 0x5f, 0x74,
	0x24, 0x66, 0x4b, 0x51, 0x44, 0x3f, 0x36, 0x33, 0x4f, 0x48, 0x23, 0x47, 0x33, 0xda, 0x6f, 0x14,
	0x68, 0xce, 0xb1, 0xb5, 0xdd, 0x58, 0xfa, 0x71, 0x5d, 0x25, 0x3f, 0xaf, 0xab, 0xe4, 0xd7, 0x75,
	0x95, 0x7c, 0xc9, 0x76, 0x95, 0x7b, 0x5a, 0xc0, 0x38, 0x5b, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x1c, 0x6d, 0x8e, 0x9c, 0x50, 0x09, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IsShow) > 0 {
		for k := range m.IsShow {
			v := m.IsShow[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.IdStr) > 0 {
		i -= len(m.IdStr)
		copy(dAtA[i:], m.IdStr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IdStr)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.To != nil {
		{
			size := m.To.Size()
			i -= size
			if _, err := m.To.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Message_User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Message_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Voice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Voice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Voice != nil {
		{
			size, err := m.Voice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Message_Card) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Card) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Card != nil {
		{
			size, err := m.Card.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Message_Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Notice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Notice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Notice != nil {
		{
			size, err := m.Notice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Message_BusinessCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_BusinessCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BusinessCard != nil {
		{
			size, err := m.BusinessCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Json) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Json) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Json != nil {
		{
			size, err := m.Json.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Message_Notify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Notify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Notify != nil {
		{
			size, err := m.Notify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Login) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Login) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Login != nil {
		{
			size, err := m.Login.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Withdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Withdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Withdraw != nil {
		{
			size, err := m.Withdraw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *Message_GroupOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_GroupOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GroupOperation != nil {
		{
			size, err := m.GroupOperation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *Message_FriendOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_FriendOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FriendOperation != nil {
		{
			size, err := m.FriendOperation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *Message_Video) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Video) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Video != nil {
		{
			size, err := m.Video.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessage(uint64(m.Id))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.To != nil {
		n += m.To.Size()
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	l = len(m.Ext)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.IdStr)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if len(m.IsShow) > 0 {
		for k, v := range m.IsShow {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 2 + sovMessage(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message_User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Voice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voice != nil {
		l = m.Voice.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Card) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Card != nil {
		l = m.Card.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Notice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Notice != nil {
		l = m.Notice.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_BusinessCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BusinessCard != nil {
		l = m.BusinessCard.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Json) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Json != nil {
		l = m.Json.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Notify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Notify != nil {
		l = m.Notify.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Login != nil {
		l = m.Login.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Withdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Withdraw != nil {
		l = m.Withdraw.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_GroupOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupOperation != nil {
		l = m.GroupOperation.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_FriendOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendOperation != nil {
		l = m.FriendOperation.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Video) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Video != nil {
		l = m.Video.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &misc.User{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &misc.User{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.To = &Message_User{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &misc.Group{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.To = &Message_Group{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Text{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Text{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Voice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Voice{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Card{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Card{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Image{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Image{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Location{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Location{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Notice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Notice{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.BusinessCard{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_BusinessCard{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Json", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Json{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Json{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.BusinessNotify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Notify{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &commands.Login{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Login{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &commands.Withdraw{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Withdraw{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &commands.GroupOperation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_GroupOperation{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendOperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &commands.FriendOperation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_FriendOperation{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Video{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Video{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsShow == nil {
				m.IsShow = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IsShow[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
