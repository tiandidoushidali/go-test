// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: med-common/app/service/med-xim/api/im/entity/types/business_card.proto

package xim

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	misc "go-test/module/test-grpc/proto-med/im/entity/misc"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 名片
type BusinessCard struct {
	User                 *misc.User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BusinessCard) Reset()         { *m = BusinessCard{} }
func (m *BusinessCard) String() string { return proto.CompactTextString(m) }
func (*BusinessCard) ProtoMessage()    {}
func (*BusinessCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_243587db2a011981, []int{0}
}
func (m *BusinessCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusinessCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusinessCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusinessCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessCard.Merge(m, src)
}
func (m *BusinessCard) XXX_Size() int {
	return m.Size()
}
func (m *BusinessCard) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessCard.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessCard proto.InternalMessageInfo

func (m *BusinessCard) GetUser() *misc.User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*BusinessCard)(nil), "med.xim.entity.types.BusinessCard")
}

func init() {
	proto.RegisterFile("med-common/app/service/med-xim/api/im/entity/types/business_card.proto", fileDescriptor_243587db2a011981)
}

var fileDescriptor_243587db2a011981 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0xcb, 0x4d, 0x4d, 0xd1,
	0x4d, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x4f, 0x2c, 0x28, 0xd0, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb,
	0x4c, 0x4e, 0xd5, 0x07, 0x09, 0x57, 0x64, 0xe6, 0xea, 0x27, 0x16, 0x64, 0xea, 0x67, 0xe6, 0xea,
	0xa7, 0xe6, 0x95, 0x64, 0x96, 0x54, 0xea, 0x97, 0x54, 0x16, 0xa4, 0x16, 0xeb, 0x27, 0x95, 0x16,
	0x67, 0xe6, 0xa5, 0x16, 0x17, 0xc7, 0x27, 0x27, 0x16, 0xa5, 0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4,
	0x0b, 0x89, 0xe4, 0xa6, 0xa6, 0xe8, 0x55, 0x64, 0xe6, 0xea, 0x41, 0x54, 0xea, 0x81, 0x55, 0x4a,
	0xd9, 0x90, 0x64, 0x7a, 0x6e, 0x66, 0x71, 0xb2, 0x7e, 0x69, 0x71, 0x6a, 0x11, 0xc4, 0x4c, 0x25,
	0x5b, 0x2e, 0x1e, 0x27, 0xa8, 0x55, 0xce, 0x89, 0x45, 0x29, 0x42, 0xba, 0x5c, 0x2c, 0x20, 0x59,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x49, 0x3d, 0x34, 0x2b, 0x41, 0xda, 0xf5, 0x42, 0x8b,
	0x53, 0x8b, 0x82, 0xc0, 0xca, 0x9c, 0x04, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1,
	0xc1, 0x23, 0x39, 0xc6, 0x28, 0xe6, 0x8a, 0xcc, 0xdc, 0x24, 0x36, 0xb0, 0xc1, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x41, 0x46, 0x69, 0x6c, 0xf6, 0x00, 0x00, 0x00,
}

func (m *BusinessCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBusinessCard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBusinessCard(dAtA []byte, offset int, v uint64) int {
	offset -= sovBusinessCard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BusinessCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovBusinessCard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBusinessCard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBusinessCard(x uint64) (n int) {
	return sovBusinessCard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BusinessCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusinessCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusinessCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusinessCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusinessCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &misc.User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusinessCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusinessCard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusinessCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBusinessCard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBusinessCard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBusinessCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBusinessCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBusinessCard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBusinessCard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBusinessCard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBusinessCard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBusinessCard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBusinessCard = fmt.Errorf("proto: unexpected end of group")
)
