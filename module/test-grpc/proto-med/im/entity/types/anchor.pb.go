// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: med-common/app/service/med-xim/api/im/entity/types/anchor.proto

package xim

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Anchor struct {
	Href  string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	Start int32  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	Len   int32  `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
	// 链接位置，居左传1，居中传2，居右传3，不传默认是0
	Style int32 `protobuf:"varint,4,opt,name=style,proto3" json:"style,omitempty"`
	// 区分不同端，key代表不同端标识；如doctor-app、doctor-h5、panel、patient-h5等
	// 详见 https://wiki.medlinker.com/pages/viewpage.action?pageId=54669120
	AnchorTag map[string]*AnchorTag `protobuf:"bytes,5,rep,name=anchorTag,proto3" json:"anchorTag,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 链接颜色
	Color string `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	// 扩展字段
	Ext                  string   `protobuf:"bytes,7,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Anchor) Reset()         { *m = Anchor{} }
func (m *Anchor) String() string { return proto.CompactTextString(m) }
func (*Anchor) ProtoMessage()    {}
func (*Anchor) Descriptor() ([]byte, []int) {
	return fileDescriptor_1acccae79a39dc16, []int{0}
}
func (m *Anchor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Anchor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Anchor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Anchor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Anchor.Merge(m, src)
}
func (m *Anchor) XXX_Size() int {
	return m.Size()
}
func (m *Anchor) XXX_DiscardUnknown() {
	xxx_messageInfo_Anchor.DiscardUnknown(m)
}

var xxx_messageInfo_Anchor proto.InternalMessageInfo

func (m *Anchor) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Anchor) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Anchor) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *Anchor) GetStyle() int32 {
	if m != nil {
		return m.Style
	}
	return 0
}

func (m *Anchor) GetAnchorTag() map[string]*AnchorTag {
	if m != nil {
		return m.AnchorTag
	}
	return nil
}

func (m *Anchor) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Anchor) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

type AnchorTag struct {
	// 不同端的跳转链接
	TagHref string `protobuf:"bytes,1,opt,name=tagHref,proto3" json:"tagHref,omitempty"`
	// 不同端是否展示此链接文本
	TagIsShow bool `protobuf:"varint,2,opt,name=tagIsShow,proto3" json:"tagIsShow,omitempty"`
	// 链接颜色
	Color string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	// 扩展字段
	Ext                  string   `protobuf:"bytes,4,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTag) Reset()         { *m = AnchorTag{} }
func (m *AnchorTag) String() string { return proto.CompactTextString(m) }
func (*AnchorTag) ProtoMessage()    {}
func (*AnchorTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_1acccae79a39dc16, []int{1}
}
func (m *AnchorTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnchorTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTag.Merge(m, src)
}
func (m *AnchorTag) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTag) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTag.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTag proto.InternalMessageInfo

func (m *AnchorTag) GetTagHref() string {
	if m != nil {
		return m.TagHref
	}
	return ""
}

func (m *AnchorTag) GetTagIsShow() bool {
	if m != nil {
		return m.TagIsShow
	}
	return false
}

func (m *AnchorTag) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *AnchorTag) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func init() {
	proto.RegisterType((*Anchor)(nil), "med.xim.entity.types.Anchor")
	proto.RegisterMapType((map[string]*AnchorTag)(nil), "med.xim.entity.types.Anchor.AnchorTagEntry")
	proto.RegisterType((*AnchorTag)(nil), "med.xim.entity.types.AnchorTag")
}

func init() {
	proto.RegisterFile("med-common/app/service/med-xim/api/im/entity/types/anchor.proto", fileDescriptor_1acccae79a39dc16)
}

var fileDescriptor_1acccae79a39dc16 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0xe9, 0xba, 0x6e, 0x36, 0x03, 0xd1, 0xb0, 0x43, 0x10, 0x99, 0x63, 0xa7, 0x81, 0xd8,
	0xc0, 0x44, 0x10, 0x2f, 0xa2, 0x20, 0xb8, 0x6b, 0xdd, 0x49, 0xf0, 0x10, 0xbb, 0xbf, 0x5d, 0x58,
	0xd3, 0x94, 0x34, 0xce, 0xf6, 0x9d, 0x7c, 0x10, 0x8f, 0x3e, 0x82, 0xec, 0x49, 0x24, 0xc9, 0xb6,
	0x22, 0x0c, 0x4f, 0xfd, 0xfe, 0x1f, 0xbf, 0xe6, 0xff, 0x7d, 0x09, 0xba, 0x15, 0x30, 0xbf, 0x48,
	0xa4, 0x10, 0x32, 0xa7, 0xac, 0x28, 0x68, 0x09, 0x6a, 0xc5, 0x13, 0xa0, 0xc6, 0xae, 0xb8, 0xa0,
	0xac, 0xe0, 0x94, 0x0b, 0x0a, 0xb9, 0xe6, 0xba, 0xa6, 0xba, 0x2e, 0xa0, 0xa4, 0x2c, 0x4f, 0x16,
	0x52, 0x45, 0x85, 0x92, 0x5a, 0xe2, 0xbe, 0x80, 0x79, 0x54, 0x71, 0x11, 0x39, 0x24, 0xb2, 0xc8,
	0xe8, 0xb3, 0x85, 0x3a, 0x77, 0x16, 0xc3, 0x18, 0xb5, 0x17, 0x0a, 0xde, 0x88, 0x37, 0xf4, 0xc6,
	0x61, 0x6c, 0x35, 0xee, 0xa3, 0xa0, 0xd4, 0x4c, 0x69, 0xd2, 0x1a, 0x7a, 0xe3, 0x20, 0x76, 0x03,
	0x3e, 0x42, 0x7e, 0x06, 0x39, 0xf1, 0xad, 0x67, 0xa4, 0xe3, 0xea, 0x0c, 0x48, 0x7b, 0xcb, 0xd5,
	0x19, 0xe0, 0x29, 0x0a, 0x5d, 0x84, 0x19, 0x4b, 0x49, 0x30, 0xf4, 0xc7, 0xbd, 0xc9, 0x79, 0xb4,
	0x2f, 0x46, 0xe4, 0x22, 0x6c, 0x3e, 0x33, 0x96, 0x3e, 0xe4, 0x5a, 0xd5, 0x71, 0xf3, 0xb7, 0x59,
	0x90, 0xc8, 0x4c, 0x2a, 0xd2, 0xb1, 0xe9, 0xdc, 0x60, 0x82, 0x40, 0xa5, 0x49, 0xd7, 0x7a, 0x46,
	0x9e, 0xbc, 0xa0, 0xc3, 0xbf, 0x87, 0x18, 0x66, 0x09, 0xf5, 0xa6, 0x95, 0x91, 0xf8, 0x0a, 0x05,
	0x2b, 0x96, 0xbd, 0x83, 0x2d, 0xd5, 0x9b, 0x9c, 0xfd, 0x17, 0x69, 0xc6, 0xd2, 0xd8, 0xd1, 0x37,
	0xad, 0x6b, 0x6f, 0xb4, 0x44, 0xe1, 0xce, 0xc7, 0x04, 0x75, 0x35, 0x4b, 0x1f, 0x9b, 0x3b, 0xdb,
	0x8e, 0xf8, 0x14, 0x85, 0x9a, 0xa5, 0xd3, 0xf2, 0x69, 0x21, 0x3f, 0xec, 0x96, 0x83, 0xb8, 0x31,
	0x9a, 0x2e, 0xfe, 0x9e, 0x2e, 0xed, 0x5d, 0x97, 0xfb, 0xe3, 0xaf, 0xf5, 0xc0, 0xfb, 0x5e, 0x0f,
	0xbc, 0x9f, 0xf5, 0xc0, 0x7b, 0xf6, 0x2b, 0x2e, 0x5e, 0x3b, 0xf6, 0x2d, 0x2f, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xcc, 0xdc, 0xe3, 0x87, 0x0e, 0x02, 0x00, 0x00,
}

func (m *Anchor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Anchor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Anchor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintAnchor(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintAnchor(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AnchorTag) > 0 {
		for k := range m.AnchorTag {
			v := m.AnchorTag[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAnchor(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAnchor(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAnchor(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Style != 0 {
		i = encodeVarintAnchor(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x20
	}
	if m.Len != 0 {
		i = encodeVarintAnchor(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x18
	}
	if m.Start != 0 {
		i = encodeVarintAnchor(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Href) > 0 {
		i -= len(m.Href)
		copy(dAtA[i:], m.Href)
		i = encodeVarintAnchor(dAtA, i, uint64(len(m.Href)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnchorTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnchorTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintAnchor(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintAnchor(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TagIsShow {
		i--
		if m.TagIsShow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.TagHref) > 0 {
		i -= len(m.TagHref)
		copy(dAtA[i:], m.TagHref)
		i = encodeVarintAnchor(dAtA, i, uint64(len(m.TagHref)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAnchor(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnchor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Anchor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovAnchor(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovAnchor(uint64(m.Start))
	}
	if m.Len != 0 {
		n += 1 + sovAnchor(uint64(m.Len))
	}
	if m.Style != 0 {
		n += 1 + sovAnchor(uint64(m.Style))
	}
	if len(m.AnchorTag) > 0 {
		for k, v := range m.AnchorTag {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAnchor(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAnchor(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAnchor(uint64(mapEntrySize))
		}
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovAnchor(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovAnchor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TagHref)
	if l > 0 {
		n += 1 + l + sovAnchor(uint64(l))
	}
	if m.TagIsShow {
		n += 2
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovAnchor(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovAnchor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAnchor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnchor(x uint64) (n int) {
	return sovAnchor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Anchor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Anchor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Anchor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Href", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnchor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Href = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnchorTag == nil {
				m.AnchorTag = make(map[string]*AnchorTag)
			}
			var mapkey string
			var mapvalue *AnchorTag
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnchor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnchor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAnchor
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAnchor
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnchor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAnchor
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAnchor
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AnchorTag{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAnchor(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAnchor
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AnchorTag[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnchor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnchor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagHref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnchor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagHref = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagIsShow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TagIsShow = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnchor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnchor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnchor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnchor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnchor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnchor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnchor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnchor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnchor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnchor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnchor = fmt.Errorf("proto: unexpected end of group")
)
