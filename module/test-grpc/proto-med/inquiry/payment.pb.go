// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: med-common/app/service/inquiry-service/api/grpc/payment.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 获取支付方式请求
type PayTypeReq struct {
	// 订单编号
	TransNo string `protobuf:"bytes,1,opt,name=transNo,proto3" json:"transNo,omitempty" form:"transNo" validate:"required"`
	// 支付环境：1-H5页面，2-微信公众号，3-微信小程序 4-医联健康app 5-广东京卫小程序
	PayEnv               int32    `protobuf:"varint,2,opt,name=payEnv,proto3" json:"payEnv,omitempty" form:"payEnv" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayTypeReq) Reset()         { *m = PayTypeReq{} }
func (m *PayTypeReq) String() string { return proto.CompactTextString(m) }
func (*PayTypeReq) ProtoMessage()    {}
func (*PayTypeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{0}
}
func (m *PayTypeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayTypeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayTypeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayTypeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayTypeReq.Merge(m, src)
}
func (m *PayTypeReq) XXX_Size() int {
	return m.Size()
}
func (m *PayTypeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayTypeReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayTypeReq proto.InternalMessageInfo

func (m *PayTypeReq) GetTransNo() string {
	if m != nil {
		return m.TransNo
	}
	return ""
}

func (m *PayTypeReq) GetPayEnv() int32 {
	if m != nil {
		return m.PayEnv
	}
	return 0
}

// 获取支付方式返回
type PayTypeResp struct {
	// 处方列表
	SupportPayType       []*PayTypeInfo `protobuf:"bytes,1,rep,name=supportPayType,proto3" json:"supportPayType"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PayTypeResp) Reset()         { *m = PayTypeResp{} }
func (m *PayTypeResp) String() string { return proto.CompactTextString(m) }
func (*PayTypeResp) ProtoMessage()    {}
func (*PayTypeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{1}
}
func (m *PayTypeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayTypeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayTypeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayTypeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayTypeResp.Merge(m, src)
}
func (m *PayTypeResp) XXX_Size() int {
	return m.Size()
}
func (m *PayTypeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayTypeResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayTypeResp proto.InternalMessageInfo

func (m *PayTypeResp) GetSupportPayType() []*PayTypeInfo {
	if m != nil {
		return m.SupportPayType
	}
	return nil
}

// 支付方式信息
type PayTypeInfo struct {
	// 支付方式：1-TL微信公众号，2-TL微信小程序，3-TL银行卡快捷支付，11-微信 JSAPI，12-微信H5，13-微信小程序，14-微信app
	PayType int32 `protobuf:"varint,1,opt,name=payType,proto3" json:"payType"`
	// 该支付方式的APP_ID
	AppId                string   `protobuf:"bytes,2,opt,name=appId,proto3" json:"appId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayTypeInfo) Reset()         { *m = PayTypeInfo{} }
func (m *PayTypeInfo) String() string { return proto.CompactTextString(m) }
func (*PayTypeInfo) ProtoMessage()    {}
func (*PayTypeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{2}
}
func (m *PayTypeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayTypeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayTypeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayTypeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayTypeInfo.Merge(m, src)
}
func (m *PayTypeInfo) XXX_Size() int {
	return m.Size()
}
func (m *PayTypeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PayTypeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PayTypeInfo proto.InternalMessageInfo

func (m *PayTypeInfo) GetPayType() int32 {
	if m != nil {
		return m.PayType
	}
	return 0
}

func (m *PayTypeInfo) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

// 问诊支付统一下单请求
type PayReq struct {
	// 订单编号
	TransNo string `protobuf:"bytes,1,opt,name=transNo,proto3" json:"transNo,omitempty" form:"transNo" validate:"required"`
	// 支付环境：1-H5页面，2-微信公众号，3-微信小程序 4-医联健康app 5-广东京卫小程序 6-骨科患者app
	PayEnv int32 `protobuf:"varint,2,opt,name=payEnv,proto3" json:"payEnv,omitempty" form:"payEnv" validate:"required"`
	// 支付方式 1-TL微信公众号，2-TL微信小程序，3-TL银行卡快捷支付，11-微信 JSAPI，12-微信H5，13-微信小程序，14-微信app 由前置接口（获得支持的支付方式）获取
	PayType int32 `protobuf:"varint,3,opt,name=payType,proto3" json:"payType,omitempty" form:"payType" validate:"required"`
	// 支付跳转的前台页面
	FrontUrl string `protobuf:"bytes,4,opt,name=frontUrl,proto3" json:"frontUrl,omitempty" form:"frontUrl"`
	// 发起支付的客户端ip地址
	Ip string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty" form:"ip"`
	// 用户Id
	UserId               uint32   `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty" form:"userId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayReq) Reset()         { *m = PayReq{} }
func (m *PayReq) String() string { return proto.CompactTextString(m) }
func (*PayReq) ProtoMessage()    {}
func (*PayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{3}
}
func (m *PayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayReq.Merge(m, src)
}
func (m *PayReq) XXX_Size() int {
	return m.Size()
}
func (m *PayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayReq proto.InternalMessageInfo

func (m *PayReq) GetTransNo() string {
	if m != nil {
		return m.TransNo
	}
	return ""
}

func (m *PayReq) GetPayEnv() int32 {
	if m != nil {
		return m.PayEnv
	}
	return 0
}

func (m *PayReq) GetPayType() int32 {
	if m != nil {
		return m.PayType
	}
	return 0
}

func (m *PayReq) GetFrontUrl() string {
	if m != nil {
		return m.FrontUrl
	}
	return ""
}

func (m *PayReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PayReq) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 问诊支付统一下单返回
type PayResp struct {
	// 订单号
	OrderTransNo string `protobuf:"bytes,1,opt,name=orderTransNo,proto3" json:"orderTransNo"`
	// 支付参数
	PayInfo string `protobuf:"bytes,2,opt,name=payInfo,proto3" json:"payInfo"`
	// 三方交易号
	TransNo string `protobuf:"bytes,3,opt,name=transNo,proto3" json:"transNo"`
	// 微信APP_ID
	AppId                string   `protobuf:"bytes,4,opt,name=appId,proto3" json:"appId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayResp) Reset()         { *m = PayResp{} }
func (m *PayResp) String() string { return proto.CompactTextString(m) }
func (*PayResp) ProtoMessage()    {}
func (*PayResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{4}
}
func (m *PayResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayResp.Merge(m, src)
}
func (m *PayResp) XXX_Size() int {
	return m.Size()
}
func (m *PayResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayResp proto.InternalMessageInfo

func (m *PayResp) GetOrderTransNo() string {
	if m != nil {
		return m.OrderTransNo
	}
	return ""
}

func (m *PayResp) GetPayInfo() string {
	if m != nil {
		return m.PayInfo
	}
	return ""
}

func (m *PayResp) GetTransNo() string {
	if m != nil {
		return m.TransNo
	}
	return ""
}

func (m *PayResp) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

// 支付回调请求
type CallBackReq struct {
	// 订单类型 1:收款 2:退款
	NotifyType int32 `protobuf:"varint,1,opt,name=notifyType,proto3" json:"notify_type"`
	// 凭据id 对应流水中的 transaction_id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id"`
	// 支付结果 成功: OK 失败: Fail
	Result string `protobuf:"bytes,3,opt,name=result,proto3" json:"result"`
	// 三方渠道交易id，不为空时需要业务方更新
	ThirdId string `protobuf:"bytes,4,opt,name=thirdId,proto3" json:"third_id"`
	// 业务id，对应流水中的 trans_no
	BusinessId string `protobuf:"bytes,5,opt,name=businessId,proto3" json:"business_id"`
	// 支付完成时间 格式： 2006-01-02 15:04:05
	CompletedTime string `protobuf:"bytes,6,opt,name=completedTime,proto3" json:"completed_time"`
	// 签名字符串
	Sign                 string   `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallBackReq) Reset()         { *m = CallBackReq{} }
func (m *CallBackReq) String() string { return proto.CompactTextString(m) }
func (*CallBackReq) ProtoMessage()    {}
func (*CallBackReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{5}
}
func (m *CallBackReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallBackReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallBackReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallBackReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallBackReq.Merge(m, src)
}
func (m *CallBackReq) XXX_Size() int {
	return m.Size()
}
func (m *CallBackReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CallBackReq.DiscardUnknown(m)
}

var xxx_messageInfo_CallBackReq proto.InternalMessageInfo

func (m *CallBackReq) GetNotifyType() int32 {
	if m != nil {
		return m.NotifyType
	}
	return 0
}

func (m *CallBackReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CallBackReq) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *CallBackReq) GetThirdId() string {
	if m != nil {
		return m.ThirdId
	}
	return ""
}

func (m *CallBackReq) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

func (m *CallBackReq) GetCompletedTime() string {
	if m != nil {
		return m.CompletedTime
	}
	return ""
}

func (m *CallBackReq) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

// 支付回调返回
type CallBackResp struct {
	// 回调结果
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallBackResp) Reset()         { *m = CallBackResp{} }
func (m *CallBackResp) String() string { return proto.CompactTextString(m) }
func (*CallBackResp) ProtoMessage()    {}
func (*CallBackResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{6}
}
func (m *CallBackResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallBackResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallBackResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallBackResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallBackResp.Merge(m, src)
}
func (m *CallBackResp) XXX_Size() int {
	return m.Size()
}
func (m *CallBackResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CallBackResp.DiscardUnknown(m)
}

var xxx_messageInfo_CallBackResp proto.InternalMessageInfo

func (m *CallBackResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CreateYanHuaHealthInsurancePayLogReq struct {
	// 医联订单号
	OrderNo string `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo,omitempty" orderNo`
	// 燕化订单号
	ExpId string `protobuf:"bytes,2,opt,name=expId,proto3" json:"expId,omitempty" expId`
	// 燕化支付参数
	PayStr string `protobuf:"bytes,3,opt,name=payStr,proto3" json:"payStr,omitempty" payStr`
	// 支付类型 微信，支付宝
	PayProvider string `protobuf:"bytes,4,opt,name=payProvider,proto3" json:"payProvider,omitempty" payProvider`
	// 缴费4位码
	PayCode string `protobuf:"bytes,5,opt,name=payCode,proto3" json:"payCode,omitempty" payCode`
	// 总金额
	FeeAll string `protobuf:"bytes,6,opt,name=feeAll,proto3" json:"feeAll,omitempty" feeAll`
	// 现金应收金额
	Cash string `protobuf:"bytes,7,opt,name=cash,proto3" json:"cash,omitempty" cash`
	// 医保支付金额
	Fund string `protobuf:"bytes,8,opt,name=fund,proto3" json:"fund,omitempty" fund`
	// 结算流水号
	ReadyPayNum string `protobuf:"bytes,9,opt,name=readyPayNum,proto3" json:"readyPayNum,omitempty" readyPayNum`
	// 个人账户支付
	PersonCountPay string `protobuf:"bytes,10,opt,name=personCountPay,proto3" json:"personCountPay,omitempty" personCountPay`
	// 患者id
	PatId string `protobuf:"bytes,11,opt,name=patId,proto3" json:"patId,omitempty" patId`
	// 患者名字
	PatName string `protobuf:"bytes,12,opt,name=patName,proto3" json:"patName,omitempty" patName`
	// qrCode
	QrCode string `protobuf:"bytes,13,opt,name=qrCode,proto3" json:"qrCode,omitempty" qrCode`
	// openId
	OpenId string `protobuf:"bytes,14,opt,name=openId,proto3" json:"openId,omitempty" openId`
	// 社保订单日期
	BillDate string `protobuf:"bytes,15,opt,name=billDate,proto3" json:"billDate,omitempty" billDate`
	// 燕化医保 完成状态 // 0=未完成，1=完成，当完成时，直接显示⽀付结果，不能进⾏后续流程
	CompleteStatus string `protobuf:"bytes,16,opt,name=completeStatus,proto3" json:"completeStatus,omitempty" completeStatus`
	// 患者身份证id
	PatIdCard string `protobuf:"bytes,17,opt,name=patIdCard,proto3" json:"patIdCard,omitempty" patIdCard`
	// 患者性别
	PatSex string `protobuf:"bytes,18,opt,name=patSex,proto3" json:"patSex,omitempty" patSex`
	// 患者手机号
	PatPhone string `protobuf:"bytes,19,opt,name=patPhone,proto3" json:"patPhone,omitempty" patPhone`
	// 就诊卡号或医保卡号
	CompatRecord string `protobuf:"bytes,20,opt,name=compatRecord,proto3" json:"compatRecord,omitempty" compatRecord`
	// 实际⽀付⾦额
	ActualPayable string `protobuf:"bytes,21,opt,name=actualPayable,proto3" json:"actualPayable,omitempty" actualPayable`
	// 总共⽀付⾦额
	AmountPayable string `protobuf:"bytes,22,opt,name=amountPayable,proto3" json:"amountPayable,omitempty" amountPayable`
	// 转换实际⽀付⾦额
	StrActualPayable string `protobuf:"bytes,23,opt,name=strActualPayable,proto3" json:"strActualPayable,omitempty" strActualPayable`
	// 转换总共⽀付⾦额
	StrAmountPayable string `protobuf:"bytes,24,opt,name=strAmountPayable,proto3" json:"strAmountPayable,omitempty" strAmountPayable`
	// 处方id
	PrescriptionId       int64    `protobuf:"varint,25,opt,name=prescriptionId,proto3" json:"prescriptionId,omitempty" prescriptionId`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateYanHuaHealthInsurancePayLogReq) Reset()         { *m = CreateYanHuaHealthInsurancePayLogReq{} }
func (m *CreateYanHuaHealthInsurancePayLogReq) String() string { return proto.CompactTextString(m) }
func (*CreateYanHuaHealthInsurancePayLogReq) ProtoMessage()    {}
func (*CreateYanHuaHealthInsurancePayLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{7}
}
func (m *CreateYanHuaHealthInsurancePayLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateYanHuaHealthInsurancePayLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateYanHuaHealthInsurancePayLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateYanHuaHealthInsurancePayLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateYanHuaHealthInsurancePayLogReq.Merge(m, src)
}
func (m *CreateYanHuaHealthInsurancePayLogReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateYanHuaHealthInsurancePayLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateYanHuaHealthInsurancePayLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateYanHuaHealthInsurancePayLogReq proto.InternalMessageInfo

func (m *CreateYanHuaHealthInsurancePayLogReq) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetExpId() string {
	if m != nil {
		return m.ExpId
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetPayStr() string {
	if m != nil {
		return m.PayStr
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetPayProvider() string {
	if m != nil {
		return m.PayProvider
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetPayCode() string {
	if m != nil {
		return m.PayCode
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetFeeAll() string {
	if m != nil {
		return m.FeeAll
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetCash() string {
	if m != nil {
		return m.Cash
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetFund() string {
	if m != nil {
		return m.Fund
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetReadyPayNum() string {
	if m != nil {
		return m.ReadyPayNum
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetPersonCountPay() string {
	if m != nil {
		return m.PersonCountPay
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetPatId() string {
	if m != nil {
		return m.PatId
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetPatName() string {
	if m != nil {
		return m.PatName
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetBillDate() string {
	if m != nil {
		return m.BillDate
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetCompleteStatus() string {
	if m != nil {
		return m.CompleteStatus
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetPatIdCard() string {
	if m != nil {
		return m.PatIdCard
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetPatSex() string {
	if m != nil {
		return m.PatSex
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetPatPhone() string {
	if m != nil {
		return m.PatPhone
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetCompatRecord() string {
	if m != nil {
		return m.CompatRecord
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetActualPayable() string {
	if m != nil {
		return m.ActualPayable
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetAmountPayable() string {
	if m != nil {
		return m.AmountPayable
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetStrActualPayable() string {
	if m != nil {
		return m.StrActualPayable
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetStrAmountPayable() string {
	if m != nil {
		return m.StrAmountPayable
	}
	return ""
}

func (m *CreateYanHuaHealthInsurancePayLogReq) GetPrescriptionId() int64 {
	if m != nil {
		return m.PrescriptionId
	}
	return 0
}

type CreateYanHuaHealthInsurancePayLogResp struct {
	// 自增id
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateYanHuaHealthInsurancePayLogResp) Reset()         { *m = CreateYanHuaHealthInsurancePayLogResp{} }
func (m *CreateYanHuaHealthInsurancePayLogResp) String() string { return proto.CompactTextString(m) }
func (*CreateYanHuaHealthInsurancePayLogResp) ProtoMessage()    {}
func (*CreateYanHuaHealthInsurancePayLogResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{8}
}
func (m *CreateYanHuaHealthInsurancePayLogResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateYanHuaHealthInsurancePayLogResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateYanHuaHealthInsurancePayLogResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateYanHuaHealthInsurancePayLogResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateYanHuaHealthInsurancePayLogResp.Merge(m, src)
}
func (m *CreateYanHuaHealthInsurancePayLogResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateYanHuaHealthInsurancePayLogResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateYanHuaHealthInsurancePayLogResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateYanHuaHealthInsurancePayLogResp proto.InternalMessageInfo

func (m *CreateYanHuaHealthInsurancePayLogResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type YanHuaPayCallbackReq struct {
	ExpId                string   `protobuf:"bytes,1,opt,name=expId,proto3" json:"expId"`
	Status               int64    `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YanHuaPayCallbackReq) Reset()         { *m = YanHuaPayCallbackReq{} }
func (m *YanHuaPayCallbackReq) String() string { return proto.CompactTextString(m) }
func (*YanHuaPayCallbackReq) ProtoMessage()    {}
func (*YanHuaPayCallbackReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{9}
}
func (m *YanHuaPayCallbackReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YanHuaPayCallbackReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YanHuaPayCallbackReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YanHuaPayCallbackReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YanHuaPayCallbackReq.Merge(m, src)
}
func (m *YanHuaPayCallbackReq) XXX_Size() int {
	return m.Size()
}
func (m *YanHuaPayCallbackReq) XXX_DiscardUnknown() {
	xxx_messageInfo_YanHuaPayCallbackReq.DiscardUnknown(m)
}

var xxx_messageInfo_YanHuaPayCallbackReq proto.InternalMessageInfo

func (m *YanHuaPayCallbackReq) GetExpId() string {
	if m != nil {
		return m.ExpId
	}
	return ""
}

func (m *YanHuaPayCallbackReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type YanHuaPayCallbackResp struct {
	// 回调结果
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YanHuaPayCallbackResp) Reset()         { *m = YanHuaPayCallbackResp{} }
func (m *YanHuaPayCallbackResp) String() string { return proto.CompactTextString(m) }
func (*YanHuaPayCallbackResp) ProtoMessage()    {}
func (*YanHuaPayCallbackResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{10}
}
func (m *YanHuaPayCallbackResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YanHuaPayCallbackResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YanHuaPayCallbackResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YanHuaPayCallbackResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YanHuaPayCallbackResp.Merge(m, src)
}
func (m *YanHuaPayCallbackResp) XXX_Size() int {
	return m.Size()
}
func (m *YanHuaPayCallbackResp) XXX_DiscardUnknown() {
	xxx_messageInfo_YanHuaPayCallbackResp.DiscardUnknown(m)
}

var xxx_messageInfo_YanHuaPayCallbackResp proto.InternalMessageInfo

func (m *YanHuaPayCallbackResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateYanHuaHealthInsurancePayLogReq struct {
	// 自增id
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty" id`
	// 状态
	Status int64 `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty" status`
	// 燕化支付参数
	PayStr string `protobuf:"bytes,4,opt,name=payStr,proto3" json:"payStr,omitempty" payStr`
	// openId
	OpenId string `protobuf:"bytes,5,opt,name=openId,proto3" json:"openId,omitempty" openId`
	// 订单号
	OrderNo string `protobuf:"bytes,6,opt,name=orderNo,proto3" json:"orderNo,omitempty" orderNo`
	// 患者身份证id
	PatIdCard string `protobuf:"bytes,7,opt,name=patIdCard,proto3" json:"patIdCard,omitempty" patIdCard`
	// 患者性别
	PatSex string `protobuf:"bytes,8,opt,name=patSex,proto3" json:"patSex,omitempty" patSex`
	// 患者手机号
	PatPhone string `protobuf:"bytes,9,opt,name=patPhone,proto3" json:"patPhone,omitempty" patPhone`
	// 就诊卡号或医保卡号
	CompatRecord string `protobuf:"bytes,10,opt,name=compatRecord,proto3" json:"compatRecord,omitempty" compatRecord`
	// 实际⽀付⾦额
	ActualPayable string `protobuf:"bytes,11,opt,name=actualPayable,proto3" json:"actualPayable,omitempty" actualPayable`
	// 总共⽀付⾦额
	AmountPayable string `protobuf:"bytes,12,opt,name=amountPayable,proto3" json:"amountPayable,omitempty" amountPayable`
	// 转换实际⽀付⾦额
	StrActualPayable string `protobuf:"bytes,13,opt,name=strActualPayable,proto3" json:"strActualPayable,omitempty" strActualPayable`
	// 转换总共⽀付⾦额
	StrAmountPayable string `protobuf:"bytes,14,opt,name=strAmountPayable,proto3" json:"strAmountPayable,omitempty" strAmountPayable`
	// 支付4位码
	PayCode string `protobuf:"bytes,15,opt,name=payCode,proto3" json:"payCode,omitempty" payCode`
	// 登录用户
	LoginUserId string `protobuf:"bytes,16,opt,name=loginUserId,proto3" json:"loginUserId,omitempty" loginUserId`
	// 结算流水号
	ReadyPayNum string `protobuf:"bytes,17,opt,name=readyPayNum,proto3" json:"readyPayNum,omitempty" readyPayNum`
	// 个人账户支付
	PersonCountPay       string   `protobuf:"bytes,18,opt,name=personCountPay,proto3" json:"personCountPay,omitempty" personCountPay`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) Reset()         { *m = UpdateYanHuaHealthInsurancePayLogReq{} }
func (m *UpdateYanHuaHealthInsurancePayLogReq) String() string { return proto.CompactTextString(m) }
func (*UpdateYanHuaHealthInsurancePayLogReq) ProtoMessage()    {}
func (*UpdateYanHuaHealthInsurancePayLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{11}
}
func (m *UpdateYanHuaHealthInsurancePayLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateYanHuaHealthInsurancePayLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateYanHuaHealthInsurancePayLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateYanHuaHealthInsurancePayLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateYanHuaHealthInsurancePayLogReq.Merge(m, src)
}
func (m *UpdateYanHuaHealthInsurancePayLogReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateYanHuaHealthInsurancePayLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateYanHuaHealthInsurancePayLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateYanHuaHealthInsurancePayLogReq proto.InternalMessageInfo

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetPayStr() string {
	if m != nil {
		return m.PayStr
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetPatIdCard() string {
	if m != nil {
		return m.PatIdCard
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetPatSex() string {
	if m != nil {
		return m.PatSex
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetPatPhone() string {
	if m != nil {
		return m.PatPhone
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetCompatRecord() string {
	if m != nil {
		return m.CompatRecord
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetActualPayable() string {
	if m != nil {
		return m.ActualPayable
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetAmountPayable() string {
	if m != nil {
		return m.AmountPayable
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetStrActualPayable() string {
	if m != nil {
		return m.StrActualPayable
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetStrAmountPayable() string {
	if m != nil {
		return m.StrAmountPayable
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetPayCode() string {
	if m != nil {
		return m.PayCode
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetLoginUserId() string {
	if m != nil {
		return m.LoginUserId
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetReadyPayNum() string {
	if m != nil {
		return m.ReadyPayNum
	}
	return ""
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) GetPersonCountPay() string {
	if m != nil {
		return m.PersonCountPay
	}
	return ""
}

type UpdateYanHuaHealthInsurancePayLogResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateYanHuaHealthInsurancePayLogResp) Reset()         { *m = UpdateYanHuaHealthInsurancePayLogResp{} }
func (m *UpdateYanHuaHealthInsurancePayLogResp) String() string { return proto.CompactTextString(m) }
func (*UpdateYanHuaHealthInsurancePayLogResp) ProtoMessage()    {}
func (*UpdateYanHuaHealthInsurancePayLogResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{12}
}
func (m *UpdateYanHuaHealthInsurancePayLogResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateYanHuaHealthInsurancePayLogResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateYanHuaHealthInsurancePayLogResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateYanHuaHealthInsurancePayLogResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateYanHuaHealthInsurancePayLogResp.Merge(m, src)
}
func (m *UpdateYanHuaHealthInsurancePayLogResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateYanHuaHealthInsurancePayLogResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateYanHuaHealthInsurancePayLogResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateYanHuaHealthInsurancePayLogResp proto.InternalMessageInfo

type QueryYanHuaPayListReq struct {
	// 燕化订单号
	ExpIds []string `protobuf:"bytes,1,rep,name=expIds,proto3" json:"expIds,omitempty" expIds`
	// 医联订单号
	OrderNos []string `protobuf:"bytes,2,rep,name=orderNos,proto3" json:"orderNos,omitempty" orderNos`
	Page     int64    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty" page`
	Limit    int64    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty" limit`
	// 状态
	Statuss []int64 `protobuf:"varint,5,rep,packed,name=statuss,proto3" json:"statuss,omitempty" statuss`
	// 处方id
	PrescriptionId int64 `protobuf:"varint,6,opt,name=prescriptionId,proto3" json:"prescriptionId,omitempty" prescriptionId`
	// 创建时间
	StartTime            string   `protobuf:"bytes,7,opt,name=startTime,proto3" json:"startTime,omitempty" startTime`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryYanHuaPayListReq) Reset()         { *m = QueryYanHuaPayListReq{} }
func (m *QueryYanHuaPayListReq) String() string { return proto.CompactTextString(m) }
func (*QueryYanHuaPayListReq) ProtoMessage()    {}
func (*QueryYanHuaPayListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{13}
}
func (m *QueryYanHuaPayListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYanHuaPayListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYanHuaPayListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYanHuaPayListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYanHuaPayListReq.Merge(m, src)
}
func (m *QueryYanHuaPayListReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryYanHuaPayListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYanHuaPayListReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYanHuaPayListReq proto.InternalMessageInfo

func (m *QueryYanHuaPayListReq) GetExpIds() []string {
	if m != nil {
		return m.ExpIds
	}
	return nil
}

func (m *QueryYanHuaPayListReq) GetOrderNos() []string {
	if m != nil {
		return m.OrderNos
	}
	return nil
}

func (m *QueryYanHuaPayListReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryYanHuaPayListReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryYanHuaPayListReq) GetStatuss() []int64 {
	if m != nil {
		return m.Statuss
	}
	return nil
}

func (m *QueryYanHuaPayListReq) GetPrescriptionId() int64 {
	if m != nil {
		return m.PrescriptionId
	}
	return 0
}

func (m *QueryYanHuaPayListReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

type QueryYanHuaPayListResp struct {
	List                 []*QueryYanHuaPayListResp_Entity `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total                int64                            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *QueryYanHuaPayListResp) Reset()         { *m = QueryYanHuaPayListResp{} }
func (m *QueryYanHuaPayListResp) String() string { return proto.CompactTextString(m) }
func (*QueryYanHuaPayListResp) ProtoMessage()    {}
func (*QueryYanHuaPayListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{14}
}
func (m *QueryYanHuaPayListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYanHuaPayListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYanHuaPayListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYanHuaPayListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYanHuaPayListResp.Merge(m, src)
}
func (m *QueryYanHuaPayListResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryYanHuaPayListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYanHuaPayListResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYanHuaPayListResp proto.InternalMessageInfo

func (m *QueryYanHuaPayListResp) GetList() []*QueryYanHuaPayListResp_Entity {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryYanHuaPayListResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type QueryYanHuaPayListResp_Entity struct {
	// 自增id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 燕化订单号
	ExpId string `protobuf:"bytes,2,opt,name=expId,proto3" json:"expId"`
	// 医联订单号
	OrderNo string `protobuf:"bytes,3,opt,name=orderNo,proto3" json:"orderNo"`
	// 用户id
	UserId int64 `protobuf:"varint,4,opt,name=userId,proto3" json:"userId"`
	// 燕化状态
	CompleteStatus int64 `protobuf:"varint,5,opt,name=completeStatus,proto3" json:"completeStatus"`
	// 状态
	Status int64 `protobuf:"varint,6,opt,name=status,proto3" json:"status"`
	// 燕化patId
	PatId string `protobuf:"bytes,7,opt,name=patId,proto3" json:"patId"`
	// 二维码（图片解析后）
	QrCode string `protobuf:"bytes,8,opt,name=qrCode,proto3" json:"qrCode"`
	// 支付4位码
	PayCode              string   `protobuf:"bytes,9,opt,name=payCode,proto3" json:"payCode"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryYanHuaPayListResp_Entity) Reset()         { *m = QueryYanHuaPayListResp_Entity{} }
func (m *QueryYanHuaPayListResp_Entity) String() string { return proto.CompactTextString(m) }
func (*QueryYanHuaPayListResp_Entity) ProtoMessage()    {}
func (*QueryYanHuaPayListResp_Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{14, 0}
}
func (m *QueryYanHuaPayListResp_Entity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYanHuaPayListResp_Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYanHuaPayListResp_Entity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYanHuaPayListResp_Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYanHuaPayListResp_Entity.Merge(m, src)
}
func (m *QueryYanHuaPayListResp_Entity) XXX_Size() int {
	return m.Size()
}
func (m *QueryYanHuaPayListResp_Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYanHuaPayListResp_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYanHuaPayListResp_Entity proto.InternalMessageInfo

func (m *QueryYanHuaPayListResp_Entity) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryYanHuaPayListResp_Entity) GetExpId() string {
	if m != nil {
		return m.ExpId
	}
	return ""
}

func (m *QueryYanHuaPayListResp_Entity) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

func (m *QueryYanHuaPayListResp_Entity) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *QueryYanHuaPayListResp_Entity) GetCompleteStatus() int64 {
	if m != nil {
		return m.CompleteStatus
	}
	return 0
}

func (m *QueryYanHuaPayListResp_Entity) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryYanHuaPayListResp_Entity) GetPatId() string {
	if m != nil {
		return m.PatId
	}
	return ""
}

func (m *QueryYanHuaPayListResp_Entity) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

func (m *QueryYanHuaPayListResp_Entity) GetPayCode() string {
	if m != nil {
		return m.PayCode
	}
	return ""
}

type CloseYanHuaHealthInsurancePayReq struct {
	// 自增id
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty" id`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseYanHuaHealthInsurancePayReq) Reset()         { *m = CloseYanHuaHealthInsurancePayReq{} }
func (m *CloseYanHuaHealthInsurancePayReq) String() string { return proto.CompactTextString(m) }
func (*CloseYanHuaHealthInsurancePayReq) ProtoMessage()    {}
func (*CloseYanHuaHealthInsurancePayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{15}
}
func (m *CloseYanHuaHealthInsurancePayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseYanHuaHealthInsurancePayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseYanHuaHealthInsurancePayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseYanHuaHealthInsurancePayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseYanHuaHealthInsurancePayReq.Merge(m, src)
}
func (m *CloseYanHuaHealthInsurancePayReq) XXX_Size() int {
	return m.Size()
}
func (m *CloseYanHuaHealthInsurancePayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseYanHuaHealthInsurancePayReq.DiscardUnknown(m)
}

var xxx_messageInfo_CloseYanHuaHealthInsurancePayReq proto.InternalMessageInfo

func (m *CloseYanHuaHealthInsurancePayReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CloseYanHuaHealthInsurancePayResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseYanHuaHealthInsurancePayResp) Reset()         { *m = CloseYanHuaHealthInsurancePayResp{} }
func (m *CloseYanHuaHealthInsurancePayResp) String() string { return proto.CompactTextString(m) }
func (*CloseYanHuaHealthInsurancePayResp) ProtoMessage()    {}
func (*CloseYanHuaHealthInsurancePayResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ea4d70b772966, []int{16}
}
func (m *CloseYanHuaHealthInsurancePayResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseYanHuaHealthInsurancePayResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseYanHuaHealthInsurancePayResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseYanHuaHealthInsurancePayResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseYanHuaHealthInsurancePayResp.Merge(m, src)
}
func (m *CloseYanHuaHealthInsurancePayResp) XXX_Size() int {
	return m.Size()
}
func (m *CloseYanHuaHealthInsurancePayResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseYanHuaHealthInsurancePayResp.DiscardUnknown(m)
}

var xxx_messageInfo_CloseYanHuaHealthInsurancePayResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PayTypeReq)(nil), "med.inquiry.service.PayTypeReq")
	proto.RegisterType((*PayTypeResp)(nil), "med.inquiry.service.PayTypeResp")
	proto.RegisterType((*PayTypeInfo)(nil), "med.inquiry.service.PayTypeInfo")
	proto.RegisterType((*PayReq)(nil), "med.inquiry.service.PayReq")
	proto.RegisterType((*PayResp)(nil), "med.inquiry.service.PayResp")
	proto.RegisterType((*CallBackReq)(nil), "med.inquiry.service.CallBackReq")
	proto.RegisterType((*CallBackResp)(nil), "med.inquiry.service.CallBackResp")
	proto.RegisterType((*CreateYanHuaHealthInsurancePayLogReq)(nil), "med.inquiry.service.CreateYanHuaHealthInsurancePayLogReq")
	proto.RegisterType((*CreateYanHuaHealthInsurancePayLogResp)(nil), "med.inquiry.service.CreateYanHuaHealthInsurancePayLogResp")
	proto.RegisterType((*YanHuaPayCallbackReq)(nil), "med.inquiry.service.YanHuaPayCallbackReq")
	proto.RegisterType((*YanHuaPayCallbackResp)(nil), "med.inquiry.service.YanHuaPayCallbackResp")
	proto.RegisterType((*UpdateYanHuaHealthInsurancePayLogReq)(nil), "med.inquiry.service.UpdateYanHuaHealthInsurancePayLogReq")
	proto.RegisterType((*UpdateYanHuaHealthInsurancePayLogResp)(nil), "med.inquiry.service.UpdateYanHuaHealthInsurancePayLogResp")
	proto.RegisterType((*QueryYanHuaPayListReq)(nil), "med.inquiry.service.QueryYanHuaPayListReq")
	proto.RegisterType((*QueryYanHuaPayListResp)(nil), "med.inquiry.service.QueryYanHuaPayListResp")
	proto.RegisterType((*QueryYanHuaPayListResp_Entity)(nil), "med.inquiry.service.QueryYanHuaPayListResp.Entity")
	proto.RegisterType((*CloseYanHuaHealthInsurancePayReq)(nil), "med.inquiry.service.CloseYanHuaHealthInsurancePayReq")
	proto.RegisterType((*CloseYanHuaHealthInsurancePayResp)(nil), "med.inquiry.service.CloseYanHuaHealthInsurancePayResp")
}

func init() {
	proto.RegisterFile("med-common/app/service/inquiry-service/api/grpc/payment.proto", fileDescriptor_8a9ea4d70b772966)
}

var fileDescriptor_8a9ea4d70b772966 = []byte{
	// 1702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x49, 0x6f, 0x1b, 0xbf,
	0x15, 0x87, 0x24, 0x5b, 0x0b, 0xe5, 0x95, 0x59, 0x3a, 0x55, 0xff, 0xff, 0x8c, 0x3c, 0xfd, 0x3b,
	0x75, 0x12, 0xc4, 0x42, 0xd2, 0xa6, 0x8b, 0x81, 0xb4, 0x89, 0xdd, 0x00, 0x11, 0x10, 0xa4, 0x2a,
	0x1d, 0x1f, 0xba, 0x00, 0x01, 0xad, 0xa1, 0xe5, 0x69, 0x66, 0xa1, 0x87, 0x1c, 0x23, 0xfa, 0x10,
	0x2d, 0x7a, 0xe8, 0xa9, 0x5f, 0xa1, 0x40, 0x4f, 0xfd, 0x02, 0xbd, 0x14, 0x3d, 0xf6, 0xd8, 0xd3,
	0xa0, 0xc8, 0xa1, 0x07, 0x1d, 0xe7, 0x13, 0x14, 0x5c, 0x66, 0xd3, 0x62, 0x2b, 0xce, 0xa5, 0x17,
	0x91, 0xef, 0xc7, 0xf7, 0x38, 0x8f, 0x6f, 0xe3, 0xa3, 0xc0, 0x73, 0x8f, 0xd8, 0x8f, 0x87, 0x81,
	0xe7, 0x05, 0x7e, 0x0f, 0x53, 0xda, 0x63, 0x24, 0xbc, 0x74, 0x86, 0xa4, 0xe7, 0xf8, 0x17, 0x91,
	0x13, 0x8e, 0x1f, 0xa7, 0x34, 0xa6, 0x4e, 0x6f, 0x14, 0xd2, 0x61, 0x8f, 0xe2, 0xb1, 0x47, 0x7c,
	0xbe, 0x4f, 0xc3, 0x80, 0x07, 0xf0, 0x96, 0x47, 0xec, 0x7d, 0xcd, 0xbb, 0xaf, 0x79, 0x3b, 0x8f,
	0x47, 0x0e, 0x3f, 0x8f, 0x4e, 0xf7, 0x87, 0x81, 0xd7, 0x1b, 0x05, 0xa3, 0xa0, 0x27, 0x79, 0x4f,
	0xa3, 0x33, 0x49, 0x49, 0x42, 0xce, 0xd4, 0x1e, 0xd6, 0xef, 0x2b, 0x00, 0x0c, 0xf0, 0xf8, 0xdd,
	0x98, 0x12, 0x44, 0x2e, 0xe0, 0x0b, 0xd0, 0xe0, 0x21, 0xf6, 0xd9, 0xdb, 0xc0, 0xa8, 0x74, 0x2b,
	0x7b, 0xad, 0xc3, 0xfb, 0x49, 0x6c, 0x5a, 0x67, 0x41, 0xe8, 0x1d, 0x58, 0x7a, 0xc1, 0xea, 0x5e,
	0x62, 0xd7, 0xb1, 0x31, 0x27, 0x07, 0x56, 0x48, 0xc4, 0xc7, 0x89, 0x6d, 0xa1, 0x54, 0x0c, 0x3e,
	0x07, 0x75, 0x8a, 0xc7, 0xaf, 0xfc, 0x4b, 0xa3, 0xda, 0xad, 0xec, 0xad, 0x1e, 0xee, 0x26, 0xb1,
	0xb9, 0xa3, 0x36, 0x50, 0xf8, 0x7c, 0x79, 0x2d, 0x64, 0x7d, 0x00, 0xed, 0x4c, 0x1d, 0x46, 0xe1,
	0x6f, 0xc1, 0x06, 0x8b, 0x28, 0x0d, 0x42, 0xae, 0x51, 0xa3, 0xd2, 0xad, 0xed, 0xb5, 0x9f, 0x76,
	0xf7, 0xe7, 0x9c, 0x7d, 0x5f, 0xf3, 0xf4, 0xfd, 0xb3, 0xe0, 0x10, 0x4e, 0x62, 0x73, 0x4a, 0x16,
	0x4d, 0xd1, 0xd6, 0x49, 0xf6, 0x31, 0x21, 0x02, 0x77, 0x41, 0x83, 0x66, 0x5f, 0x11, 0xba, 0xb7,
	0x27, 0xb1, 0x99, 0x42, 0x28, 0x9d, 0x40, 0x13, 0xac, 0x62, 0x4a, 0xfb, 0xb6, 0x3c, 0x60, 0xeb,
	0xb0, 0x35, 0x89, 0x4d, 0x05, 0x20, 0x35, 0x58, 0xff, 0xa8, 0x82, 0xfa, 0x00, 0x8f, 0xff, 0x1f,
	0xec, 0x29, 0x14, 0x48, 0xcf, 0x54, 0x93, 0xf2, 0x05, 0x05, 0xf4, 0xc2, 0x02, 0x05, 0xd2, 0xe3,
	0xf6, 0x40, 0xf3, 0x2c, 0x0c, 0x7c, 0x7e, 0x12, 0xba, 0xc6, 0x8a, 0x3c, 0xc3, 0xad, 0x24, 0x36,
	0x37, 0xd5, 0x16, 0xe9, 0x8a, 0x85, 0x32, 0x26, 0xf8, 0x35, 0xa8, 0x3a, 0xd4, 0x58, 0x95, 0xac,
	0xeb, 0x49, 0x6c, 0xb6, 0x14, 0xab, 0x43, 0x2d, 0x54, 0x75, 0x28, 0x7c, 0x00, 0xea, 0x11, 0x23,
	0x61, 0xdf, 0x36, 0xea, 0xdd, 0xca, 0xde, 0xfa, 0xe1, 0x76, 0x12, 0x9b, 0xeb, 0x8a, 0x45, 0xe1,
	0x16, 0xd2, 0x0c, 0xd6, 0x5f, 0x2b, 0xa0, 0x21, 0x0d, 0xc9, 0x28, 0xfc, 0x01, 0x58, 0x0b, 0x42,
	0x9b, 0x84, 0xef, 0x4a, 0xe6, 0xdc, 0x9a, 0xc4, 0x66, 0x09, 0x47, 0x25, 0x4a, 0xbb, 0x54, 0x78,
	0x57, 0x7b, 0x2b, 0x75, 0xa9, 0x80, 0x50, 0x3a, 0x11, 0x6c, 0xa9, 0x9b, 0x6a, 0x39, 0x9b, 0x86,
	0x72, 0x5f, 0x64, 0x9e, 0x5f, 0x59, 0xe0, 0xf9, 0xbf, 0x54, 0x41, 0xfb, 0x08, 0xbb, 0xee, 0x21,
	0x1e, 0x7e, 0x10, 0xee, 0xef, 0x01, 0xe0, 0x07, 0xdc, 0x39, 0x2b, 0x06, 0xd5, 0xe6, 0x24, 0x36,
	0xdb, 0x0a, 0x7d, 0xcf, 0x45, 0x60, 0x15, 0x58, 0xe0, 0x5d, 0x50, 0x75, 0xd2, 0xc0, 0xaa, 0x4f,
	0x62, 0xb3, 0xea, 0xd8, 0xa8, 0xea, 0xd8, 0xd0, 0x02, 0xf5, 0x90, 0xb0, 0xc8, 0xe5, 0x5a, 0x3f,
	0x30, 0x89, 0x4d, 0x8d, 0x20, 0x3d, 0xc2, 0xfb, 0xa0, 0xc1, 0xcf, 0x9d, 0xd0, 0xce, 0xf4, 0x5b,
	0x9b, 0xc4, 0x66, 0x53, 0x42, 0xef, 0x1d, 0x1b, 0xa5, 0x8b, 0x42, 0xa9, 0xd3, 0x88, 0x39, 0x3e,
	0x61, 0xac, 0x6f, 0x6b, 0x3f, 0x49, 0xa5, 0x52, 0x54, 0x70, 0x17, 0x58, 0xe0, 0x8f, 0xc1, 0xfa,
	0x30, 0xf0, 0xa8, 0x4b, 0x38, 0xb1, 0xdf, 0x39, 0x1e, 0x91, 0x8e, 0x6b, 0xa9, 0x0c, 0xcb, 0x16,
	0xde, 0x73, 0xc7, 0x23, 0xa8, 0xcc, 0x08, 0xbf, 0x02, 0x2b, 0xcc, 0x19, 0xf9, 0x46, 0x43, 0x0a,
	0x34, 0x27, 0xb1, 0x29, 0x69, 0x24, 0x7f, 0xad, 0x67, 0x60, 0x2d, 0x37, 0x16, 0xa3, 0xc2, 0x0b,
	0x2c, 0x1a, 0x0e, 0x09, 0x63, 0xd2, 0x54, 0x4d, 0xe5, 0x05, 0x0d, 0xa1, 0x74, 0x62, 0xfd, 0xa9,
	0x05, 0xbe, 0x39, 0x0a, 0x09, 0xe6, 0xe4, 0x57, 0xd8, 0x7f, 0x1d, 0xe1, 0xd7, 0x04, 0xbb, 0xfc,
	0xbc, 0xef, 0xb3, 0x28, 0xc4, 0xfe, 0x90, 0x0c, 0xf0, 0xf8, 0x4d, 0x30, 0x12, 0xd6, 0xdf, 0x05,
	0x0d, 0x19, 0x0c, 0x59, 0xb4, 0xb4, 0x93, 0xd8, 0x4c, 0x21, 0x94, 0x4e, 0x84, 0x57, 0xc9, 0xc7,
	0x42, 0x3e, 0x27, 0xb1, 0xa9, 0x00, 0xa4, 0x06, 0x61, 0x7c, 0x8a, 0xc7, 0xc7, 0x3c, 0x4c, 0x8d,
	0x9f, 0xc4, 0xa6, 0x46, 0x90, 0x1e, 0xe1, 0x13, 0xd0, 0xa6, 0x78, 0x3c, 0x08, 0x83, 0x4b, 0xc7,
	0x26, 0xa1, 0x76, 0xc0, 0x66, 0x12, 0x9b, 0x45, 0x18, 0x15, 0x09, 0x1d, 0x9b, 0x47, 0x81, 0x4d,
	0xb4, 0x13, 0xa4, 0x7a, 0x1a, 0x42, 0xe9, 0x44, 0x7c, 0xfd, 0x8c, 0x90, 0x97, 0xae, 0xab, 0xcd,
	0x2e, 0xbf, 0xae, 0x10, 0xa4, 0x47, 0x61, 0xe7, 0x21, 0x66, 0xe7, 0xa9, 0x9d, 0x93, 0xd8, 0x94,
	0x34, 0x92, 0xbf, 0x62, 0xf5, 0x2c, 0xf2, 0x6d, 0xa3, 0x99, 0xaf, 0x0a, 0x1a, 0xc9, 0x5f, 0xa1,
	0x79, 0x48, 0xb0, 0x3d, 0x1e, 0xe0, 0xf1, 0xdb, 0xc8, 0x33, 0x5a, 0xb9, 0xe6, 0x05, 0x18, 0x15,
	0x09, 0x78, 0x00, 0x36, 0x28, 0x09, 0x59, 0xe0, 0x1f, 0x05, 0x91, 0x2f, 0xaa, 0xa9, 0x01, 0x54,
	0x44, 0x24, 0xb1, 0x39, 0xb5, 0x82, 0xa6, 0x68, 0x61, 0x6d, 0x8a, 0x79, 0xdf, 0x36, 0xda, 0xb9,
	0xb5, 0x25, 0x80, 0xd4, 0xa0, 0xcc, 0xc2, 0xdf, 0x62, 0x8f, 0x18, 0x6b, 0x45, 0xb3, 0x48, 0x08,
	0xa5, 0x13, 0x61, 0x96, 0x8b, 0x50, 0x1a, 0x6f, 0x3d, 0x37, 0x8b, 0x42, 0x90, 0x1e, 0x05, 0x4f,
	0x40, 0x89, 0xdf, 0xb7, 0x8d, 0x8d, 0x9c, 0x47, 0x21, 0x48, 0x8f, 0x70, 0x0f, 0x34, 0x4f, 0x1d,
	0xd7, 0xfd, 0x39, 0xe6, 0xc4, 0xd8, 0x54, 0x69, 0x93, 0xc4, 0x66, 0x86, 0xa1, 0x6c, 0x26, 0x4e,
	0x9d, 0x46, 0xf7, 0x31, 0xc7, 0x3c, 0x62, 0xc6, 0x56, 0x7e, 0xea, 0xf2, 0x0a, 0x9a, 0xa2, 0xe1,
	0x23, 0xd0, 0x92, 0xa7, 0x3b, 0xc2, 0xa1, 0x6d, 0x6c, 0xe7, 0xa5, 0x31, 0x03, 0x51, 0x3e, 0x55,
	0xf1, 0xc6, 0x8f, 0xc9, 0x47, 0x03, 0x16, 0xe3, 0x4d, 0x20, 0x48, 0x8f, 0x42, 0x6d, 0x8a, 0xf9,
	0xe0, 0x3c, 0xf0, 0x89, 0x71, 0x2b, 0x57, 0x3b, 0xc5, 0x50, 0x36, 0x13, 0x85, 0x53, 0x28, 0x83,
	0x39, 0x22, 0xc3, 0x20, 0xb4, 0x8d, 0xdb, 0xaa, 0x70, 0x26, 0xb1, 0x59, 0xc2, 0x51, 0x89, 0x82,
	0x3f, 0x02, 0xeb, 0x78, 0xc8, 0x23, 0xec, 0x0e, 0xf0, 0x18, 0x9f, 0xba, 0xc4, 0xb8, 0x23, 0xc5,
	0x64, 0xb1, 0x2e, 0x2d, 0xa0, 0x32, 0x29, 0x05, 0x3d, 0xed, 0x6c, 0x29, 0x78, 0xb7, 0x20, 0x58,
	0x5c, 0x40, 0x65, 0x12, 0xbe, 0x00, 0x5b, 0x8c, 0x87, 0x2f, 0x4b, 0x1f, 0xfd, 0x96, 0x94, 0xbd,
	0x9d, 0xc4, 0xe6, 0xcc, 0x1a, 0x9a, 0x41, 0xd2, 0x1d, 0x4a, 0x5f, 0x37, 0xca, 0x3b, 0x94, 0x14,
	0x98, 0x41, 0x64, 0x60, 0x87, 0x84, 0x0d, 0x43, 0x87, 0x72, 0x27, 0x10, 0x81, 0xf3, 0xed, 0x6e,
	0x65, 0xaf, 0xa6, 0x03, 0xbb, 0xb4, 0x82, 0xa6, 0x68, 0xeb, 0x67, 0x60, 0x77, 0x89, 0xaa, 0xc4,
	0xa8, 0xa8, 0xf1, 0x7d, 0x5b, 0x56, 0xa4, 0x5a, 0x5e, 0xe3, 0xfb, 0xb6, 0xf5, 0x1b, 0x70, 0x5b,
	0x89, 0x0e, 0xf0, 0x58, 0xd4, 0xc5, 0x53, 0x7d, 0x89, 0x64, 0xf5, 0xa9, 0x92, 0xdf, 0x3a, 0xd3,
	0xf5, 0x89, 0xa9, 0x80, 0xac, 0xca, 0x4d, 0xe5, 0xe5, 0xa0, 0x10, 0xa4, 0x47, 0xeb, 0xa7, 0xe0,
	0xce, 0x9c, 0xcd, 0x97, 0x2f, 0xba, 0x7f, 0xaf, 0x83, 0x6f, 0x4e, 0xa8, 0x7d, 0x7d, 0xd1, 0x2d,
	0x9d, 0x2e, 0xc9, 0x4e, 0x27, 0x94, 0x3c, 0x2e, 0x29, 0x99, 0x14, 0x94, 0xd4, 0x59, 0x92, 0x17,
	0xda, 0x95, 0x85, 0x85, 0x36, 0xcf, 0xe9, 0xd5, 0x85, 0x39, 0x5d, 0x28, 0xfc, 0xf5, 0x2b, 0x0a,
	0x7f, 0x29, 0x29, 0x1b, 0x4b, 0x27, 0x65, 0x73, 0xa9, 0xa4, 0x6c, 0x7d, 0x56, 0x52, 0x82, 0x9b,
	0x25, 0x65, 0xfb, 0xa6, 0x49, 0xb9, 0xf6, 0x05, 0x49, 0xb9, 0xfe, 0xc5, 0x49, 0xb9, 0xf1, 0x59,
	0x49, 0x59, 0xb8, 0x27, 0x37, 0xaf, 0xb8, 0x27, 0x9f, 0x80, 0xb6, 0x1b, 0x8c, 0x1c, 0xff, 0x44,
	0x35, 0x97, 0x5b, 0xf9, 0x3d, 0x56, 0x80, 0x51, 0x91, 0x98, 0xbe, 0xfa, 0xb6, 0x6f, 0x74, 0xf5,
	0xc1, 0x65, 0xaf, 0x3e, 0xeb, 0x7b, 0x60, 0x77, 0x89, 0x14, 0x62, 0xd4, 0xfa, 0x5b, 0x15, 0xdc,
	0xf9, 0x65, 0x44, 0xc2, 0x71, 0x96, 0xb2, 0x6f, 0x1c, 0xc6, 0x45, 0x76, 0x59, 0xa0, 0x2e, 0x73,
	0x9e, 0xc9, 0x77, 0x90, 0x8e, 0x42, 0x85, 0x20, 0x3d, 0x8a, 0x28, 0xd4, 0x11, 0x2e, 0x72, 0xad,
	0x96, 0x46, 0x61, 0x8a, 0xa1, 0x6c, 0x26, 0x1a, 0x03, 0x8a, 0x47, 0xea, 0x65, 0x50, 0x53, 0x8d,
	0x81, 0xa0, 0x91, 0xfc, 0x15, 0x75, 0xc7, 0x75, 0x3c, 0x87, 0xcb, 0x64, 0xac, 0xa9, 0x9b, 0x5a,
	0x02, 0x48, 0x0d, 0xb2, 0x74, 0xc8, 0xc4, 0x65, 0xc6, 0x6a, 0xb7, 0xb6, 0x57, 0x53, 0x8e, 0xd1,
	0x10, 0x4a, 0x27, 0x73, 0x8a, 0x6a, 0x7d, 0xd9, 0xa2, 0x2a, 0x52, 0x94, 0x71, 0x1c, 0x72, 0xd9,
	0x76, 0x16, 0x52, 0x34, 0x03, 0x51, 0x3e, 0xb5, 0xfe, 0x5b, 0x03, 0x77, 0xe7, 0x99, 0x8d, 0x51,
	0x38, 0x00, 0x2b, 0xae, 0xc3, 0xb8, 0x7e, 0x3d, 0x3e, 0x9d, 0xfb, 0x7a, 0x9c, 0x2f, 0xba, 0xff,
	0xca, 0xe7, 0x0e, 0x1f, 0xab, 0xe6, 0x55, 0xec, 0x81, 0xe4, 0xaf, 0xb0, 0x0e, 0x0f, 0x38, 0x76,
	0x75, 0x39, 0x93, 0x55, 0x59, 0x02, 0x48, 0x0d, 0x9d, 0x7f, 0x57, 0x41, 0x5d, 0xc9, 0xea, 0xae,
	0x7e, 0xaa, 0xe2, 0x3b, 0xf6, 0x4c, 0xe7, 0x39, 0x53, 0xd9, 0x0b, 0x85, 0xac, 0xf0, 0x2e, 0x99,
	0x29, 0x64, 0x56, 0xf6, 0xa4, 0x5a, 0xc9, 0x2f, 0x00, 0x85, 0xa4, 0x6f, 0xa9, 0x39, 0xdd, 0xcb,
	0xaa, 0xf2, 0xc2, 0xe4, 0xfa, 0xee, 0x25, 0xbf, 0x60, 0xea, 0x8b, 0x2e, 0x98, 0xbc, 0xaf, 0x6b,
	0xe4, 0x67, 0x29, 0xf5, 0x75, 0x79, 0xc3, 0xd6, 0xcc, 0x9f, 0x30, 0x53, 0x0d, 0x5b, 0x21, 0xd5,
	0x5b, 0xa5, 0xe7, 0x5a, 0x29, 0xd5, 0xad, 0x03, 0xd0, 0x3d, 0x72, 0x03, 0xb6, 0x30, 0x8f, 0xae,
	0xb8, 0x87, 0xac, 0xef, 0x82, 0x9d, 0x6b, 0x64, 0x19, 0x7d, 0xfa, 0xc7, 0x86, 0x7c, 0x78, 0x7a,
	0xc4, 0xe7, 0xf0, 0x8d, 0x9c, 0xaa, 0x97, 0xff, 0x55, 0xff, 0x3a, 0x20, 0x72, 0xd1, 0xe9, 0x5e,
	0xcd, 0xc0, 0x28, 0x7c, 0x01, 0x6a, 0xa2, 0x0b, 0xfe, 0xce, 0x22, 0x46, 0xb1, 0xcb, 0x57, 0x8b,
	0x17, 0x19, 0x85, 0xbf, 0x00, 0xcd, 0xf4, 0xd5, 0x04, 0xe7, 0x7f, 0xaf, 0xf0, 0x02, 0xed, 0xec,
	0x5c, 0xc3, 0xc1, 0x28, 0xfc, 0x73, 0x05, 0xec, 0x5c, 0xdb, 0xb9, 0xc0, 0x9f, 0xcc, 0xdf, 0x68,
	0x89, 0x77, 0x58, 0xe7, 0xe0, 0xa6, 0xa2, 0x5a, 0xb9, 0x6b, 0x8b, 0xe6, 0x02, 0xe5, 0x96, 0xe9,
	0x57, 0x16, 0x28, 0xb7, 0x54, 0x9d, 0x86, 0xbf, 0x03, 0xdb, 0x33, 0x4d, 0x15, 0x7c, 0x30, 0x77,
	0xc3, 0x79, 0x9d, 0x5d, 0xe7, 0xe1, 0xb2, 0xac, 0x8c, 0x42, 0x0f, 0xc0, 0xd9, 0x02, 0x05, 0x1f,
	0x2e, 0x5d, 0xc9, 0x2e, 0x3a, 0x8f, 0x3e, 0xa3, 0xea, 0xc1, 0x3f, 0x54, 0xc0, 0xd7, 0x57, 0xe6,
	0x09, 0x7c, 0x36, 0xdf, 0xab, 0xd7, 0xe4, 0x65, 0xe7, 0x87, 0x37, 0x11, 0x63, 0xf4, 0x70, 0xfb,
	0x9f, 0x9f, 0xee, 0x55, 0xfe, 0xf5, 0xe9, 0x5e, 0xe5, 0x3f, 0x9f, 0xee, 0x55, 0x7e, 0x5d, 0xc3,
	0xd4, 0x39, 0xad, 0xcb, 0xbf, 0x30, 0xbf, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0x46,
	0x03, 0xd7, 0x47, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PaymentClient is the client API for Payment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentClient interface {
	// 获取支付方式
	PayType(ctx context.Context, in *PayTypeReq, opts ...grpc.CallOption) (*PayTypeResp, error)
	// 问诊支付统一下单
	Pay(ctx context.Context, in *PayReq, opts ...grpc.CallOption) (*PayResp, error)
	// 支付回调
	CallBack(ctx context.Context, in *CallBackReq, opts ...grpc.CallOption) (*CallBackResp, error)
	// 燕化医保支付
	CreateYanHuaHealthInsurancePayLog(ctx context.Context, in *CreateYanHuaHealthInsurancePayLogReq, opts ...grpc.CallOption) (*CreateYanHuaHealthInsurancePayLogResp, error)
	// 更新燕化医保支付
	UpdateYanHuaHealthInsurancePayLog(ctx context.Context, in *UpdateYanHuaHealthInsurancePayLogReq, opts ...grpc.CallOption) (*UpdateYanHuaHealthInsurancePayLogResp, error)
	// 燕化支付状态
	YanHuaPayCallback(ctx context.Context, in *YanHuaPayCallbackReq, opts ...grpc.CallOption) (*YanHuaPayCallbackResp, error)
	// 查询燕化支付信息
	QueryYanHuaPayList(ctx context.Context, in *QueryYanHuaPayListReq, opts ...grpc.CallOption) (*QueryYanHuaPayListResp, error)
	// 关闭燕化社保支付订单
	CloseYanHuaHealthInsurancePay(ctx context.Context, in *CloseYanHuaHealthInsurancePayReq, opts ...grpc.CallOption) (*CloseYanHuaHealthInsurancePayResp, error)
}

type paymentClient struct {
	cc *grpc.ClientConn
}

func NewPaymentClient(cc *grpc.ClientConn) PaymentClient {
	return &paymentClient{cc}
}

func (c *paymentClient) PayType(ctx context.Context, in *PayTypeReq, opts ...grpc.CallOption) (*PayTypeResp, error) {
	out := new(PayTypeResp)
	err := c.cc.Invoke(ctx, "/med.inquiry.service.Payment/PayType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) Pay(ctx context.Context, in *PayReq, opts ...grpc.CallOption) (*PayResp, error) {
	out := new(PayResp)
	err := c.cc.Invoke(ctx, "/med.inquiry.service.Payment/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) CallBack(ctx context.Context, in *CallBackReq, opts ...grpc.CallOption) (*CallBackResp, error) {
	out := new(CallBackResp)
	err := c.cc.Invoke(ctx, "/med.inquiry.service.Payment/CallBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) CreateYanHuaHealthInsurancePayLog(ctx context.Context, in *CreateYanHuaHealthInsurancePayLogReq, opts ...grpc.CallOption) (*CreateYanHuaHealthInsurancePayLogResp, error) {
	out := new(CreateYanHuaHealthInsurancePayLogResp)
	err := c.cc.Invoke(ctx, "/med.inquiry.service.Payment/CreateYanHuaHealthInsurancePayLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) UpdateYanHuaHealthInsurancePayLog(ctx context.Context, in *UpdateYanHuaHealthInsurancePayLogReq, opts ...grpc.CallOption) (*UpdateYanHuaHealthInsurancePayLogResp, error) {
	out := new(UpdateYanHuaHealthInsurancePayLogResp)
	err := c.cc.Invoke(ctx, "/med.inquiry.service.Payment/UpdateYanHuaHealthInsurancePayLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) YanHuaPayCallback(ctx context.Context, in *YanHuaPayCallbackReq, opts ...grpc.CallOption) (*YanHuaPayCallbackResp, error) {
	out := new(YanHuaPayCallbackResp)
	err := c.cc.Invoke(ctx, "/med.inquiry.service.Payment/YanHuaPayCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) QueryYanHuaPayList(ctx context.Context, in *QueryYanHuaPayListReq, opts ...grpc.CallOption) (*QueryYanHuaPayListResp, error) {
	out := new(QueryYanHuaPayListResp)
	err := c.cc.Invoke(ctx, "/med.inquiry.service.Payment/QueryYanHuaPayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) CloseYanHuaHealthInsurancePay(ctx context.Context, in *CloseYanHuaHealthInsurancePayReq, opts ...grpc.CallOption) (*CloseYanHuaHealthInsurancePayResp, error) {
	out := new(CloseYanHuaHealthInsurancePayResp)
	err := c.cc.Invoke(ctx, "/med.inquiry.service.Payment/CloseYanHuaHealthInsurancePay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServer is the server API for Payment service.
type PaymentServer interface {
	// 获取支付方式
	PayType(context.Context, *PayTypeReq) (*PayTypeResp, error)
	// 问诊支付统一下单
	Pay(context.Context, *PayReq) (*PayResp, error)
	// 支付回调
	CallBack(context.Context, *CallBackReq) (*CallBackResp, error)
	// 燕化医保支付
	CreateYanHuaHealthInsurancePayLog(context.Context, *CreateYanHuaHealthInsurancePayLogReq) (*CreateYanHuaHealthInsurancePayLogResp, error)
	// 更新燕化医保支付
	UpdateYanHuaHealthInsurancePayLog(context.Context, *UpdateYanHuaHealthInsurancePayLogReq) (*UpdateYanHuaHealthInsurancePayLogResp, error)
	// 燕化支付状态
	YanHuaPayCallback(context.Context, *YanHuaPayCallbackReq) (*YanHuaPayCallbackResp, error)
	// 查询燕化支付信息
	QueryYanHuaPayList(context.Context, *QueryYanHuaPayListReq) (*QueryYanHuaPayListResp, error)
	// 关闭燕化社保支付订单
	CloseYanHuaHealthInsurancePay(context.Context, *CloseYanHuaHealthInsurancePayReq) (*CloseYanHuaHealthInsurancePayResp, error)
}

// UnimplementedPaymentServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentServer struct {
}

func (*UnimplementedPaymentServer) PayType(ctx context.Context, req *PayTypeReq) (*PayTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayType not implemented")
}
func (*UnimplementedPaymentServer) Pay(ctx context.Context, req *PayReq) (*PayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (*UnimplementedPaymentServer) CallBack(ctx context.Context, req *CallBackReq) (*CallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallBack not implemented")
}
func (*UnimplementedPaymentServer) CreateYanHuaHealthInsurancePayLog(ctx context.Context, req *CreateYanHuaHealthInsurancePayLogReq) (*CreateYanHuaHealthInsurancePayLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateYanHuaHealthInsurancePayLog not implemented")
}
func (*UnimplementedPaymentServer) UpdateYanHuaHealthInsurancePayLog(ctx context.Context, req *UpdateYanHuaHealthInsurancePayLogReq) (*UpdateYanHuaHealthInsurancePayLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateYanHuaHealthInsurancePayLog not implemented")
}
func (*UnimplementedPaymentServer) YanHuaPayCallback(ctx context.Context, req *YanHuaPayCallbackReq) (*YanHuaPayCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YanHuaPayCallback not implemented")
}
func (*UnimplementedPaymentServer) QueryYanHuaPayList(ctx context.Context, req *QueryYanHuaPayListReq) (*QueryYanHuaPayListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryYanHuaPayList not implemented")
}
func (*UnimplementedPaymentServer) CloseYanHuaHealthInsurancePay(ctx context.Context, req *CloseYanHuaHealthInsurancePayReq) (*CloseYanHuaHealthInsurancePayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseYanHuaHealthInsurancePay not implemented")
}

func RegisterPaymentServer(s *grpc.Server, srv PaymentServer) {
	s.RegisterService(&_Payment_serviceDesc, srv)
}

func _Payment_PayType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).PayType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.inquiry.service.Payment/PayType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).PayType(ctx, req.(*PayTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.inquiry.service.Payment/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).Pay(ctx, req.(*PayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_CallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.inquiry.service.Payment/CallBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CallBack(ctx, req.(*CallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_CreateYanHuaHealthInsurancePayLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateYanHuaHealthInsurancePayLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CreateYanHuaHealthInsurancePayLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.inquiry.service.Payment/CreateYanHuaHealthInsurancePayLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CreateYanHuaHealthInsurancePayLog(ctx, req.(*CreateYanHuaHealthInsurancePayLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_UpdateYanHuaHealthInsurancePayLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateYanHuaHealthInsurancePayLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).UpdateYanHuaHealthInsurancePayLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.inquiry.service.Payment/UpdateYanHuaHealthInsurancePayLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).UpdateYanHuaHealthInsurancePayLog(ctx, req.(*UpdateYanHuaHealthInsurancePayLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_YanHuaPayCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YanHuaPayCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).YanHuaPayCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.inquiry.service.Payment/YanHuaPayCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).YanHuaPayCallback(ctx, req.(*YanHuaPayCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_QueryYanHuaPayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYanHuaPayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).QueryYanHuaPayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.inquiry.service.Payment/QueryYanHuaPayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).QueryYanHuaPayList(ctx, req.(*QueryYanHuaPayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_CloseYanHuaHealthInsurancePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseYanHuaHealthInsurancePayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CloseYanHuaHealthInsurancePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.inquiry.service.Payment/CloseYanHuaHealthInsurancePay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CloseYanHuaHealthInsurancePay(ctx, req.(*CloseYanHuaHealthInsurancePayReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Payment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "med.inquiry.service.Payment",
	HandlerType: (*PaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayType",
			Handler:    _Payment_PayType_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _Payment_Pay_Handler,
		},
		{
			MethodName: "CallBack",
			Handler:    _Payment_CallBack_Handler,
		},
		{
			MethodName: "CreateYanHuaHealthInsurancePayLog",
			Handler:    _Payment_CreateYanHuaHealthInsurancePayLog_Handler,
		},
		{
			MethodName: "UpdateYanHuaHealthInsurancePayLog",
			Handler:    _Payment_UpdateYanHuaHealthInsurancePayLog_Handler,
		},
		{
			MethodName: "YanHuaPayCallback",
			Handler:    _Payment_YanHuaPayCallback_Handler,
		},
		{
			MethodName: "QueryYanHuaPayList",
			Handler:    _Payment_QueryYanHuaPayList_Handler,
		},
		{
			MethodName: "CloseYanHuaHealthInsurancePay",
			Handler:    _Payment_CloseYanHuaHealthInsurancePay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "med-common/app/service/inquiry-service/api/grpc/payment.proto",
}

func (m *PayTypeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayTypeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayTypeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PayEnv != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.PayEnv))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TransNo) > 0 {
		i -= len(m.TransNo)
		copy(dAtA[i:], m.TransNo)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.TransNo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayTypeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayTypeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayTypeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SupportPayType) > 0 {
		for iNdEx := len(m.SupportPayType) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupportPayType[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPayment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PayTypeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayTypeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayTypeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0x12
	}
	if m.PayType != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.PayType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FrontUrl) > 0 {
		i -= len(m.FrontUrl)
		copy(dAtA[i:], m.FrontUrl)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.FrontUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.PayType != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.PayType))
		i--
		dAtA[i] = 0x18
	}
	if m.PayEnv != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.PayEnv))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TransNo) > 0 {
		i -= len(m.TransNo)
		copy(dAtA[i:], m.TransNo)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.TransNo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TransNo) > 0 {
		i -= len(m.TransNo)
		copy(dAtA[i:], m.TransNo)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.TransNo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PayInfo) > 0 {
		i -= len(m.PayInfo)
		copy(dAtA[i:], m.PayInfo)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PayInfo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderTransNo) > 0 {
		i -= len(m.OrderTransNo)
		copy(dAtA[i:], m.OrderTransNo)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.OrderTransNo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CallBackReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallBackReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallBackReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CompletedTime) > 0 {
		i -= len(m.CompletedTime)
		copy(dAtA[i:], m.CompletedTime)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CompletedTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BusinessId) > 0 {
		i -= len(m.BusinessId)
		copy(dAtA[i:], m.BusinessId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.BusinessId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ThirdId) > 0 {
		i -= len(m.ThirdId)
		copy(dAtA[i:], m.ThirdId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ThirdId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.NotifyType != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.NotifyType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CallBackResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallBackResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallBackResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateYanHuaHealthInsurancePayLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateYanHuaHealthInsurancePayLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateYanHuaHealthInsurancePayLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PrescriptionId != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.PrescriptionId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.StrAmountPayable) > 0 {
		i -= len(m.StrAmountPayable)
		copy(dAtA[i:], m.StrAmountPayable)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.StrAmountPayable)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.StrActualPayable) > 0 {
		i -= len(m.StrActualPayable)
		copy(dAtA[i:], m.StrActualPayable)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.StrActualPayable)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.AmountPayable) > 0 {
		i -= len(m.AmountPayable)
		copy(dAtA[i:], m.AmountPayable)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.AmountPayable)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ActualPayable) > 0 {
		i -= len(m.ActualPayable)
		copy(dAtA[i:], m.ActualPayable)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ActualPayable)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CompatRecord) > 0 {
		i -= len(m.CompatRecord)
		copy(dAtA[i:], m.CompatRecord)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CompatRecord)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.PatPhone) > 0 {
		i -= len(m.PatPhone)
		copy(dAtA[i:], m.PatPhone)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PatPhone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.PatSex) > 0 {
		i -= len(m.PatSex)
		copy(dAtA[i:], m.PatSex)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PatSex)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.PatIdCard) > 0 {
		i -= len(m.PatIdCard)
		copy(dAtA[i:], m.PatIdCard)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PatIdCard)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.CompleteStatus) > 0 {
		i -= len(m.CompleteStatus)
		copy(dAtA[i:], m.CompleteStatus)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CompleteStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.BillDate) > 0 {
		i -= len(m.BillDate)
		copy(dAtA[i:], m.BillDate)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.BillDate)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.OpenId) > 0 {
		i -= len(m.OpenId)
		copy(dAtA[i:], m.OpenId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.OpenId)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.QrCode) > 0 {
		i -= len(m.QrCode)
		copy(dAtA[i:], m.QrCode)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.QrCode)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.PatName) > 0 {
		i -= len(m.PatName)
		copy(dAtA[i:], m.PatName)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PatName)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PatId) > 0 {
		i -= len(m.PatId)
		copy(dAtA[i:], m.PatId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PatId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PersonCountPay) > 0 {
		i -= len(m.PersonCountPay)
		copy(dAtA[i:], m.PersonCountPay)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PersonCountPay)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ReadyPayNum) > 0 {
		i -= len(m.ReadyPayNum)
		copy(dAtA[i:], m.ReadyPayNum)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ReadyPayNum)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Fund) > 0 {
		i -= len(m.Fund)
		copy(dAtA[i:], m.Fund)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Fund)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Cash) > 0 {
		i -= len(m.Cash)
		copy(dAtA[i:], m.Cash)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Cash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FeeAll) > 0 {
		i -= len(m.FeeAll)
		copy(dAtA[i:], m.FeeAll)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.FeeAll)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PayCode) > 0 {
		i -= len(m.PayCode)
		copy(dAtA[i:], m.PayCode)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PayCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PayProvider) > 0 {
		i -= len(m.PayProvider)
		copy(dAtA[i:], m.PayProvider)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PayProvider)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PayStr) > 0 {
		i -= len(m.PayStr)
		copy(dAtA[i:], m.PayStr)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PayStr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExpId) > 0 {
		i -= len(m.ExpId)
		copy(dAtA[i:], m.ExpId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ExpId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderNo) > 0 {
		i -= len(m.OrderNo)
		copy(dAtA[i:], m.OrderNo)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.OrderNo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateYanHuaHealthInsurancePayLogResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateYanHuaHealthInsurancePayLogResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateYanHuaHealthInsurancePayLogResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *YanHuaPayCallbackReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YanHuaPayCallbackReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YanHuaPayCallbackReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ExpId) > 0 {
		i -= len(m.ExpId)
		copy(dAtA[i:], m.ExpId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ExpId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *YanHuaPayCallbackResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YanHuaPayCallbackResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YanHuaPayCallbackResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PersonCountPay) > 0 {
		i -= len(m.PersonCountPay)
		copy(dAtA[i:], m.PersonCountPay)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PersonCountPay)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ReadyPayNum) > 0 {
		i -= len(m.ReadyPayNum)
		copy(dAtA[i:], m.ReadyPayNum)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ReadyPayNum)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.LoginUserId) > 0 {
		i -= len(m.LoginUserId)
		copy(dAtA[i:], m.LoginUserId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.LoginUserId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PayCode) > 0 {
		i -= len(m.PayCode)
		copy(dAtA[i:], m.PayCode)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PayCode)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.StrAmountPayable) > 0 {
		i -= len(m.StrAmountPayable)
		copy(dAtA[i:], m.StrAmountPayable)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.StrAmountPayable)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.StrActualPayable) > 0 {
		i -= len(m.StrActualPayable)
		copy(dAtA[i:], m.StrActualPayable)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.StrActualPayable)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AmountPayable) > 0 {
		i -= len(m.AmountPayable)
		copy(dAtA[i:], m.AmountPayable)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.AmountPayable)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ActualPayable) > 0 {
		i -= len(m.ActualPayable)
		copy(dAtA[i:], m.ActualPayable)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ActualPayable)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CompatRecord) > 0 {
		i -= len(m.CompatRecord)
		copy(dAtA[i:], m.CompatRecord)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CompatRecord)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PatPhone) > 0 {
		i -= len(m.PatPhone)
		copy(dAtA[i:], m.PatPhone)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PatPhone)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PatSex) > 0 {
		i -= len(m.PatSex)
		copy(dAtA[i:], m.PatSex)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PatSex)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PatIdCard) > 0 {
		i -= len(m.PatIdCard)
		copy(dAtA[i:], m.PatIdCard)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PatIdCard)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OrderNo) > 0 {
		i -= len(m.OrderNo)
		copy(dAtA[i:], m.OrderNo)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.OrderNo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OpenId) > 0 {
		i -= len(m.OpenId)
		copy(dAtA[i:], m.OpenId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.OpenId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PayStr) > 0 {
		i -= len(m.PayStr)
		copy(dAtA[i:], m.PayStr)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PayStr)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateYanHuaHealthInsurancePayLogResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateYanHuaHealthInsurancePayLogResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateYanHuaHealthInsurancePayLogResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *QueryYanHuaPayListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYanHuaPayListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYanHuaPayListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PrescriptionId != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.PrescriptionId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Statuss) > 0 {
		dAtA2 := make([]byte, len(m.Statuss)*10)
		var j1 int
		for _, num1 := range m.Statuss {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPayment(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OrderNos) > 0 {
		for iNdEx := len(m.OrderNos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderNos[iNdEx])
			copy(dAtA[i:], m.OrderNos[iNdEx])
			i = encodeVarintPayment(dAtA, i, uint64(len(m.OrderNos[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ExpIds) > 0 {
		for iNdEx := len(m.ExpIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExpIds[iNdEx])
			copy(dAtA[i:], m.ExpIds[iNdEx])
			i = encodeVarintPayment(dAtA, i, uint64(len(m.ExpIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryYanHuaPayListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYanHuaPayListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYanHuaPayListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPayment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryYanHuaPayListResp_Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYanHuaPayListResp_Entity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYanHuaPayListResp_Entity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PayCode) > 0 {
		i -= len(m.PayCode)
		copy(dAtA[i:], m.PayCode)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PayCode)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.QrCode) > 0 {
		i -= len(m.QrCode)
		copy(dAtA[i:], m.QrCode)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.QrCode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PatId) > 0 {
		i -= len(m.PatId)
		copy(dAtA[i:], m.PatId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PatId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.CompleteStatus != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.CompleteStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.UserId != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OrderNo) > 0 {
		i -= len(m.OrderNo)
		copy(dAtA[i:], m.OrderNo)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.OrderNo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExpId) > 0 {
		i -= len(m.ExpId)
		copy(dAtA[i:], m.ExpId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ExpId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseYanHuaHealthInsurancePayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseYanHuaHealthInsurancePayReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseYanHuaHealthInsurancePayReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseYanHuaHealthInsurancePayResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseYanHuaHealthInsurancePayResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseYanHuaHealthInsurancePayResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintPayment(dAtA []byte, offset int, v uint64) int {
	offset -= sovPayment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PayTypeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransNo)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.PayEnv != 0 {
		n += 1 + sovPayment(uint64(m.PayEnv))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayTypeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SupportPayType) > 0 {
		for _, e := range m.SupportPayType {
			l = e.Size()
			n += 1 + l + sovPayment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayTypeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PayType != 0 {
		n += 1 + sovPayment(uint64(m.PayType))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransNo)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.PayEnv != 0 {
		n += 1 + sovPayment(uint64(m.PayEnv))
	}
	if m.PayType != 0 {
		n += 1 + sovPayment(uint64(m.PayType))
	}
	l = len(m.FrontUrl)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPayment(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderTransNo)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PayInfo)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.TransNo)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CallBackReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotifyType != 0 {
		n += 1 + sovPayment(uint64(m.NotifyType))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.ThirdId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.BusinessId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.CompletedTime)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CallBackResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateYanHuaHealthInsurancePayLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.ExpId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PayStr)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PayProvider)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PayCode)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.FeeAll)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Cash)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Fund)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.ReadyPayNum)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PersonCountPay)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PatId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PatName)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.QrCode)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.BillDate)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.CompleteStatus)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.PatIdCard)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.PatSex)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.PatPhone)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.CompatRecord)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.ActualPayable)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.AmountPayable)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.StrActualPayable)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.StrAmountPayable)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	if m.PrescriptionId != 0 {
		n += 2 + sovPayment(uint64(m.PrescriptionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateYanHuaHealthInsurancePayLogResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPayment(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YanHuaPayCallbackReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExpId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovPayment(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YanHuaPayCallbackResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateYanHuaHealthInsurancePayLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPayment(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovPayment(uint64(m.Status))
	}
	l = len(m.PayStr)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PatIdCard)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PatSex)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PatPhone)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.CompatRecord)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.ActualPayable)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.AmountPayable)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.StrActualPayable)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.StrAmountPayable)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PayCode)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.LoginUserId)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.ReadyPayNum)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.PersonCountPay)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateYanHuaHealthInsurancePayLogResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryYanHuaPayListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpIds) > 0 {
		for _, s := range m.ExpIds {
			l = len(s)
			n += 1 + l + sovPayment(uint64(l))
		}
	}
	if len(m.OrderNos) > 0 {
		for _, s := range m.OrderNos {
			l = len(s)
			n += 1 + l + sovPayment(uint64(l))
		}
	}
	if m.Page != 0 {
		n += 1 + sovPayment(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovPayment(uint64(m.Limit))
	}
	if len(m.Statuss) > 0 {
		l = 0
		for _, e := range m.Statuss {
			l += sovPayment(uint64(e))
		}
		n += 1 + sovPayment(uint64(l)) + l
	}
	if m.PrescriptionId != 0 {
		n += 1 + sovPayment(uint64(m.PrescriptionId))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryYanHuaPayListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPayment(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovPayment(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryYanHuaPayListResp_Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPayment(uint64(m.Id))
	}
	l = len(m.ExpId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPayment(uint64(m.UserId))
	}
	if m.CompleteStatus != 0 {
		n += 1 + sovPayment(uint64(m.CompleteStatus))
	}
	if m.Status != 0 {
		n += 1 + sovPayment(uint64(m.Status))
	}
	l = len(m.PatId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.QrCode)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PayCode)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseYanHuaHealthInsurancePayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPayment(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseYanHuaHealthInsurancePayResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPayment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPayment(x uint64) (n int) {
	return sovPayment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PayTypeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayTypeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayTypeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayEnv", wireType)
			}
			m.PayEnv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayEnv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayTypeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayTypeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayTypeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportPayType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportPayType = append(m.SupportPayType, &PayTypeInfo{})
			if err := m.SupportPayType[len(m.SupportPayType)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayTypeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayTypeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayTypeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			m.PayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayEnv", wireType)
			}
			m.PayEnv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayEnv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			m.PayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrontUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderTransNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderTransNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallBackReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallBackReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallBackReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyType", wireType)
			}
			m.NotifyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirdId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThirdId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallBackResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallBackResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallBackResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateYanHuaHealthInsurancePayLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateYanHuaHealthInsurancePayLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateYanHuaHealthInsurancePayLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAll", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAll = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fund", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fund = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyPayNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadyPayNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonCountPay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PersonCountPay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompleteStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatIdCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatIdCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatSex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatSex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompatRecord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompatRecord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualPayable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActualPayable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPayable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountPayable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrActualPayable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrActualPayable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrAmountPayable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrAmountPayable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrescriptionId", wireType)
			}
			m.PrescriptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrescriptionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateYanHuaHealthInsurancePayLogResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateYanHuaHealthInsurancePayLogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateYanHuaHealthInsurancePayLogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YanHuaPayCallbackReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YanHuaPayCallbackReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YanHuaPayCallbackReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YanHuaPayCallbackResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YanHuaPayCallbackResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YanHuaPayCallbackResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateYanHuaHealthInsurancePayLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateYanHuaHealthInsurancePayLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateYanHuaHealthInsurancePayLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatIdCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatIdCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatSex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatSex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatPhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompatRecord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompatRecord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualPayable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActualPayable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPayable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountPayable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrActualPayable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrActualPayable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrAmountPayable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrAmountPayable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyPayNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadyPayNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonCountPay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PersonCountPay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateYanHuaHealthInsurancePayLogResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateYanHuaHealthInsurancePayLogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateYanHuaHealthInsurancePayLogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYanHuaPayListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryYanHuaPayListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryYanHuaPayListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpIds = append(m.ExpIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNos = append(m.OrderNos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPayment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Statuss = append(m.Statuss, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPayment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPayment
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPayment
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Statuss) == 0 {
					m.Statuss = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPayment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Statuss = append(m.Statuss, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuss", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrescriptionId", wireType)
			}
			m.PrescriptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrescriptionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYanHuaPayListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryYanHuaPayListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryYanHuaPayListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &QueryYanHuaPayListResp_Entity{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYanHuaPayListResp_Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteStatus", wireType)
			}
			m.CompleteStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleteStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseYanHuaHealthInsurancePayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseYanHuaHealthInsurancePayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseYanHuaHealthInsurancePayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseYanHuaHealthInsurancePayResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseYanHuaHealthInsurancePayResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseYanHuaHealthInsurancePayResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPayment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPayment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPayment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPayment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPayment = fmt.Errorf("proto: unexpected end of group")
)
