// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: med-common/app/service/med-xim/api/grpc/chat.proto

package xim

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserChatListReq struct {
	UserId               uint32   `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty" form:"userId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserChatListReq) Reset()         { *m = UserChatListReq{} }
func (m *UserChatListReq) String() string { return proto.CompactTextString(m) }
func (*UserChatListReq) ProtoMessage()    {}
func (*UserChatListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ad3b2805a792a4, []int{0}
}
func (m *UserChatListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserChatListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserChatListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserChatListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserChatListReq.Merge(m, src)
}
func (m *UserChatListReq) XXX_Size() int {
	return m.Size()
}
func (m *UserChatListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserChatListReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserChatListReq proto.InternalMessageInfo

func (m *UserChatListReq) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UserChatListResp struct {
	UserChatList         []*UserChatList `protobuf:"bytes,1,rep,name=userChatList,proto3" json:"userChatList"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UserChatListResp) Reset()         { *m = UserChatListResp{} }
func (m *UserChatListResp) String() string { return proto.CompactTextString(m) }
func (*UserChatListResp) ProtoMessage()    {}
func (*UserChatListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ad3b2805a792a4, []int{1}
}
func (m *UserChatListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserChatListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserChatListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserChatListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserChatListResp.Merge(m, src)
}
func (m *UserChatListResp) XXX_Size() int {
	return m.Size()
}
func (m *UserChatListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserChatListResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserChatListResp proto.InternalMessageInfo

func (m *UserChatListResp) GetUserChatList() []*UserChatList {
	if m != nil {
		return m.UserChatList
	}
	return nil
}

type UserChatList struct {
	MessageId string     `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId"`
	MapId     string     `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId"`
	Message   string     `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Extra     *ListExtra `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra"`
	// 默认不下发字段，只是方便业务处理
	GroupId              uint32   `protobuf:"varint,5,opt,name=groupId,proto3" json:"groupId"`
	UserId               uint32   `protobuf:"varint,6,opt,name=userId,proto3" json:"userId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserChatList) Reset()         { *m = UserChatList{} }
func (m *UserChatList) String() string { return proto.CompactTextString(m) }
func (*UserChatList) ProtoMessage()    {}
func (*UserChatList) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ad3b2805a792a4, []int{2}
}
func (m *UserChatList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserChatList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserChatList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserChatList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserChatList.Merge(m, src)
}
func (m *UserChatList) XXX_Size() int {
	return m.Size()
}
func (m *UserChatList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserChatList.DiscardUnknown(m)
}

var xxx_messageInfo_UserChatList proto.InternalMessageInfo

func (m *UserChatList) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *UserChatList) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *UserChatList) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserChatList) GetExtra() *ListExtra {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *UserChatList) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UserChatList) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ListExtra struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Avatar               string   `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListExtra) Reset()         { *m = ListExtra{} }
func (m *ListExtra) String() string { return proto.CompactTextString(m) }
func (*ListExtra) ProtoMessage()    {}
func (*ListExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ad3b2805a792a4, []int{3}
}
func (m *ListExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListExtra.Merge(m, src)
}
func (m *ListExtra) XXX_Size() int {
	return m.Size()
}
func (m *ListExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_ListExtra.DiscardUnknown(m)
}

var xxx_messageInfo_ListExtra proto.InternalMessageInfo

func (m *ListExtra) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListExtra) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type DeleteChatReq struct {
	UserId               uint32   `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty" form:"userId"`
	MapId                string   `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty" form:"mapId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteChatReq) Reset()         { *m = DeleteChatReq{} }
func (m *DeleteChatReq) String() string { return proto.CompactTextString(m) }
func (*DeleteChatReq) ProtoMessage()    {}
func (*DeleteChatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ad3b2805a792a4, []int{4}
}
func (m *DeleteChatReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteChatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteChatReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteChatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteChatReq.Merge(m, src)
}
func (m *DeleteChatReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteChatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteChatReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteChatReq proto.InternalMessageInfo

func (m *DeleteChatReq) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteChatReq) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

type DeleteChatResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteChatResp) Reset()         { *m = DeleteChatResp{} }
func (m *DeleteChatResp) String() string { return proto.CompactTextString(m) }
func (*DeleteChatResp) ProtoMessage()    {}
func (*DeleteChatResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ad3b2805a792a4, []int{5}
}
func (m *DeleteChatResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteChatResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteChatResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteChatResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteChatResp.Merge(m, src)
}
func (m *DeleteChatResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteChatResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteChatResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteChatResp proto.InternalMessageInfo

type ChatGetImConfigReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatGetImConfigReq) Reset()         { *m = ChatGetImConfigReq{} }
func (m *ChatGetImConfigReq) String() string { return proto.CompactTextString(m) }
func (*ChatGetImConfigReq) ProtoMessage()    {}
func (*ChatGetImConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ad3b2805a792a4, []int{6}
}
func (m *ChatGetImConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatGetImConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatGetImConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatGetImConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatGetImConfigReq.Merge(m, src)
}
func (m *ChatGetImConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatGetImConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatGetImConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatGetImConfigReq proto.InternalMessageInfo

type ChatGetImConfigResp struct {
	GroupSilence         int32                      `protobuf:"varint,1,opt,name=groupSilence,proto3" json:"groupSilence"`
	GroupSilencePeriod   []*GroupSilencePeriodArray `protobuf:"bytes,2,rep,name=groupSilencePeriod,proto3" json:"groupSilencePeriod"`
	GroupSilenceText     string                     `protobuf:"bytes,3,opt,name=groupSilenceText,proto3" json:"groupSilenceText"`
	UpgradeText          string                     `protobuf:"bytes,4,opt,name=upgradeText,proto3" json:"upgradeText"`
	ExpressionUrl        string                     `protobuf:"bytes,5,opt,name=expressionUrl,proto3" json:"expressionUrl"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ChatGetImConfigResp) Reset()         { *m = ChatGetImConfigResp{} }
func (m *ChatGetImConfigResp) String() string { return proto.CompactTextString(m) }
func (*ChatGetImConfigResp) ProtoMessage()    {}
func (*ChatGetImConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ad3b2805a792a4, []int{7}
}
func (m *ChatGetImConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatGetImConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatGetImConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatGetImConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatGetImConfigResp.Merge(m, src)
}
func (m *ChatGetImConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *ChatGetImConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatGetImConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChatGetImConfigResp proto.InternalMessageInfo

func (m *ChatGetImConfigResp) GetGroupSilence() int32 {
	if m != nil {
		return m.GroupSilence
	}
	return 0
}

func (m *ChatGetImConfigResp) GetGroupSilencePeriod() []*GroupSilencePeriodArray {
	if m != nil {
		return m.GroupSilencePeriod
	}
	return nil
}

func (m *ChatGetImConfigResp) GetGroupSilenceText() string {
	if m != nil {
		return m.GroupSilenceText
	}
	return ""
}

func (m *ChatGetImConfigResp) GetUpgradeText() string {
	if m != nil {
		return m.UpgradeText
	}
	return ""
}

func (m *ChatGetImConfigResp) GetExpressionUrl() string {
	if m != nil {
		return m.ExpressionUrl
	}
	return ""
}

type GroupSilencePeriodArray struct {
	Gspa                 []int32  `protobuf:"varint,1,rep,packed,name=gspa,proto3" json:"gspa"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupSilencePeriodArray) Reset()         { *m = GroupSilencePeriodArray{} }
func (m *GroupSilencePeriodArray) String() string { return proto.CompactTextString(m) }
func (*GroupSilencePeriodArray) ProtoMessage()    {}
func (*GroupSilencePeriodArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ad3b2805a792a4, []int{8}
}
func (m *GroupSilencePeriodArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupSilencePeriodArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupSilencePeriodArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupSilencePeriodArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupSilencePeriodArray.Merge(m, src)
}
func (m *GroupSilencePeriodArray) XXX_Size() int {
	return m.Size()
}
func (m *GroupSilencePeriodArray) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupSilencePeriodArray.DiscardUnknown(m)
}

var xxx_messageInfo_GroupSilencePeriodArray proto.InternalMessageInfo

func (m *GroupSilencePeriodArray) GetGspa() []int32 {
	if m != nil {
		return m.Gspa
	}
	return nil
}

func init() {
	proto.RegisterType((*UserChatListReq)(nil), "med.xim.v1.UserChatListReq")
	proto.RegisterType((*UserChatListResp)(nil), "med.xim.v1.UserChatListResp")
	proto.RegisterType((*UserChatList)(nil), "med.xim.v1.UserChatList")
	proto.RegisterType((*ListExtra)(nil), "med.xim.v1.ListExtra")
	proto.RegisterType((*DeleteChatReq)(nil), "med.xim.v1.DeleteChatReq")
	proto.RegisterType((*DeleteChatResp)(nil), "med.xim.v1.DeleteChatResp")
	proto.RegisterType((*ChatGetImConfigReq)(nil), "med.xim.v1.ChatGetImConfigReq")
	proto.RegisterType((*ChatGetImConfigResp)(nil), "med.xim.v1.ChatGetImConfigResp")
	proto.RegisterType((*GroupSilencePeriodArray)(nil), "med.xim.v1.GroupSilencePeriodArray")
}

func init() {
	proto.RegisterFile("med-common/app/service/med-xim/api/grpc/chat.proto", fileDescriptor_54ad3b2805a792a4)
}

var fileDescriptor_54ad3b2805a792a4 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0xd5, 0xb6, 0x49, 0x21, 0x93, 0x84, 0xa6, 0xa6, 0x40, 0x08, 0x55, 0x5c, 0x2d, 0x02, 0x15,
	0xa1, 0x66, 0xd5, 0x80, 0xa8, 0x84, 0x38, 0x40, 0x0a, 0xaa, 0x22, 0x01, 0x42, 0x86, 0x5e, 0xb8,
	0x39, 0x89, 0xbb, 0x5d, 0x51, 0x67, 0x5d, 0x7b, 0x53, 0x85, 0x1f, 0xe0, 0xdb, 0x38, 0xf2, 0x05,
	0x2b, 0xd4, 0x03, 0x87, 0x3d, 0xf6, 0x0b, 0x90, 0xed, 0x6d, 0xe3, 0x6d, 0x1a, 0x24, 0x2e, 0xf1,
	0xcc, 0x9b, 0x37, 0xb3, 0x33, 0xe3, 0xe7, 0x40, 0x97, 0xb3, 0xd1, 0xf6, 0x30, 0xe6, 0x3c, 0x1e,
	0x07, 0x54, 0x88, 0x40, 0x31, 0x79, 0x1a, 0x0d, 0x59, 0xa0, 0xe1, 0x69, 0xc4, 0x03, 0x2a, 0xa2,
	0x20, 0x94, 0x62, 0x18, 0x0c, 0x8f, 0x68, 0xd2, 0x11, 0x32, 0x4e, 0x62, 0x04, 0x9c, 0x8d, 0x3a,
	0xd3, 0x88, 0x77, 0x4e, 0x77, 0x5a, 0xdb, 0x61, 0x94, 0x1c, 0x4d, 0x06, 0x9d, 0x61, 0xcc, 0x83,
	0x30, 0x0e, 0xe3, 0xc0, 0x50, 0x06, 0x93, 0x43, 0xe3, 0x19, 0xc7, 0x58, 0x36, 0xd5, 0x7f, 0x05,
	0xab, 0x07, 0x8a, 0xc9, 0xbd, 0x23, 0x9a, 0xbc, 0x8f, 0x54, 0x42, 0xd8, 0x09, 0x7a, 0x02, 0x2b,
	0x13, 0xc5, 0x64, 0x7f, 0xd4, 0xf4, 0x36, 0xbd, 0xad, 0x7a, 0x6f, 0xed, 0x3c, 0xc5, 0xf5, 0xc3,
	0x58, 0xf2, 0x97, 0xbe, 0xc5, 0x7d, 0x92, 0x13, 0xfc, 0x01, 0x34, 0x8a, 0xd9, 0x4a, 0xa0, 0x8f,
	0x50, 0x9b, 0x38, 0x58, 0xd3, 0xdb, 0x5c, 0xde, 0xaa, 0x76, 0x9b, 0x9d, 0x59, 0x8f, 0x1d, 0x37,
	0xa7, 0xd7, 0xc8, 0x52, 0x5c, 0xc8, 0x20, 0x05, 0xcf, 0xff, 0xb1, 0x04, 0x35, 0x37, 0x01, 0x3d,
	0x85, 0x0a, 0x67, 0x4a, 0xd1, 0x90, 0xe5, 0x2d, 0x56, 0x7a, 0xf5, 0x2c, 0xc5, 0x33, 0x90, 0xcc,
	0x4c, 0x84, 0xa1, 0xcc, 0xa9, 0xe8, 0x8f, 0x9a, 0x4b, 0x86, 0x58, 0xc9, 0x52, 0x6c, 0x01, 0x62,
	0x0f, 0xf4, 0x08, 0x6e, 0xe4, 0xec, 0xe6, 0xb2, 0xa1, 0x54, 0xb3, 0x14, 0x5f, 0x40, 0xe4, 0xc2,
	0x40, 0x2f, 0xa0, 0xcc, 0xa6, 0x89, 0xa4, 0xcd, 0xd2, 0xa6, 0xb7, 0x55, 0xed, 0xde, 0x71, 0xc7,
	0xd1, 0x5d, 0xbd, 0xd3, 0x41, 0x5b, 0xde, 0xf0, 0x88, 0x3d, 0x74, 0xf9, 0x50, 0xc6, 0x13, 0xdd,
	0x41, 0xd9, 0x6c, 0xd3, 0x94, 0xcf, 0x21, 0x72, 0x61, 0x20, 0xff, 0x72, 0xe7, 0x2b, 0x86, 0x05,
	0x59, 0x8a, 0x73, 0xe4, 0x72, 0xd9, 0x1f, 0xa0, 0x72, 0xf9, 0x25, 0xb4, 0x01, 0xa5, 0x31, 0xe5,
	0x2c, 0x9f, 0xff, 0x66, 0x96, 0x62, 0xe3, 0x13, 0xf3, 0xab, 0xcb, 0xd1, 0x53, 0x9a, 0x50, 0x99,
	0x8f, 0x6d, 0xca, 0x59, 0x84, 0xe4, 0xa7, 0x3f, 0x80, 0xfa, 0x5b, 0x76, 0xcc, 0x12, 0xa6, 0x17,
	0xfb, 0x7f, 0xf7, 0x8e, 0x1e, 0x17, 0xb7, 0xda, 0x38, 0x4f, 0x71, 0xcd, 0x32, 0x0d, 0xec, 0xe7,
	0xcb, 0xf5, 0x1b, 0x70, 0xcb, 0xfd, 0x86, 0x12, 0xfe, 0x3a, 0x20, 0x6d, 0xef, 0xb3, 0xa4, 0xcf,
	0xf7, 0xe2, 0xf1, 0x61, 0x14, 0x12, 0x76, 0xe2, 0xff, 0x59, 0x82, 0xdb, 0x73, 0xb0, 0x12, 0xe8,
	0x39, 0xd4, 0xcc, 0x86, 0x3e, 0x47, 0xc7, 0x6c, 0x3c, 0xb4, 0xd3, 0x96, 0xad, 0x62, 0x5c, 0x9c,
	0x14, 0x3c, 0xf4, 0x0d, 0x90, 0xeb, 0x7f, 0x62, 0x32, 0x8a, 0x75, 0xab, 0x5a, 0x87, 0x0f, 0xdd,
	0x8b, 0xdb, 0x9f, 0x63, 0xbd, 0x91, 0x92, 0x7e, 0xef, 0xdd, 0xcd, 0x52, 0x7c, 0x4d, 0x09, 0x72,
	0x0d, 0x86, 0x5e, 0x43, 0xc3, 0x45, 0xbf, 0xb0, 0x69, 0x92, 0x0b, 0x69, 0x3d, 0x4b, 0xf1, 0x5c,
	0x8c, 0xcc, 0x21, 0x68, 0x07, 0xaa, 0x13, 0x11, 0x4a, 0x3a, 0xb2, 0xc9, 0x25, 0x93, 0xbc, 0x9a,
	0xa5, 0xd8, 0x85, 0x89, 0xeb, 0xa0, 0x5d, 0xa8, 0xb3, 0xa9, 0x90, 0x4c, 0xa9, 0x28, 0x1e, 0x1f,
	0xc8, 0x63, 0xa3, 0xad, 0x4a, 0x6f, 0x2d, 0x4b, 0x71, 0x31, 0x40, 0x8a, 0xae, 0xbf, 0x0b, 0xf7,
	0x16, 0x0c, 0xad, 0x15, 0x15, 0x2a, 0x41, 0xcd, 0x7b, 0x2d, 0x5b, 0x45, 0x69, 0x9f, 0x98, 0xdf,
	0x6e, 0xe6, 0x41, 0x49, 0xdf, 0x10, 0xea, 0x5f, 0x79, 0x8d, 0x0f, 0x16, 0x3d, 0x6c, 0xc2, 0x4e,
	0x5a, 0x1b, 0x8b, 0x83, 0x4a, 0xa0, 0x3d, 0x80, 0x99, 0x3a, 0xd0, 0x7d, 0x97, 0x5b, 0x50, 0x66,
	0xab, 0xb5, 0x28, 0xa4, 0x04, 0x22, 0xb0, 0x7a, 0x45, 0x39, 0xa8, 0xed, 0xd2, 0xe7, 0xd5, 0xd6,
	0xc2, 0xff, 0x8c, 0x2b, 0xd1, 0x5b, 0xfb, 0x79, 0xd6, 0xf6, 0x7e, 0x9d, 0xb5, 0xbd, 0xdf, 0x67,
	0x6d, 0xef, 0xeb, 0xf2, 0x34, 0xe2, 0x83, 0x15, 0xf3, 0x77, 0xf9, 0xec, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc0, 0x40, 0x2b, 0x33, 0x9f, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	// 会话列表
	UserChatList(ctx context.Context, in *UserChatListReq, opts ...grpc.CallOption) (*UserChatListResp, error)
	// 删除会话
	DeleteChat(ctx context.Context, in *DeleteChatReq, opts ...grpc.CallOption) (*DeleteChatResp, error)
	// 获取im配置
	ChatGetImConfig(ctx context.Context, in *ChatGetImConfigReq, opts ...grpc.CallOption) (*ChatGetImConfigResp, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) UserChatList(ctx context.Context, in *UserChatListReq, opts ...grpc.CallOption) (*UserChatListResp, error) {
	out := new(UserChatListResp)
	err := c.cc.Invoke(ctx, "/med.xim.v1.Chat/UserChatList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteChat(ctx context.Context, in *DeleteChatReq, opts ...grpc.CallOption) (*DeleteChatResp, error) {
	out := new(DeleteChatResp)
	err := c.cc.Invoke(ctx, "/med.xim.v1.Chat/DeleteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChatGetImConfig(ctx context.Context, in *ChatGetImConfigReq, opts ...grpc.CallOption) (*ChatGetImConfigResp, error) {
	out := new(ChatGetImConfigResp)
	err := c.cc.Invoke(ctx, "/med.xim.v1.Chat/ChatGetImConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	// 会话列表
	UserChatList(context.Context, *UserChatListReq) (*UserChatListResp, error)
	// 删除会话
	DeleteChat(context.Context, *DeleteChatReq) (*DeleteChatResp, error)
	// 获取im配置
	ChatGetImConfig(context.Context, *ChatGetImConfigReq) (*ChatGetImConfigResp, error)
}

// UnimplementedChatServer can be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (*UnimplementedChatServer) UserChatList(ctx context.Context, req *UserChatListReq) (*UserChatListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChatList not implemented")
}
func (*UnimplementedChatServer) DeleteChat(ctx context.Context, req *DeleteChatReq) (*DeleteChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (*UnimplementedChatServer) ChatGetImConfig(ctx context.Context, req *ChatGetImConfigReq) (*ChatGetImConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetImConfig not implemented")
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_UserChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChatListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UserChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.xim.v1.Chat/UserChatList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UserChatList(ctx, req.(*UserChatListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.xim.v1.Chat/DeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteChat(ctx, req.(*DeleteChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChatGetImConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatGetImConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChatGetImConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/med.xim.v1.Chat/ChatGetImConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChatGetImConfig(ctx, req.(*ChatGetImConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "med.xim.v1.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserChatList",
			Handler:    _Chat_UserChatList_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _Chat_DeleteChat_Handler,
		},
		{
			MethodName: "ChatGetImConfig",
			Handler:    _Chat_ChatGetImConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "med-common/app/service/med-xim/api/grpc/chat.proto",
}

func (m *UserChatListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserChatListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserChatListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserChatListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserChatListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserChatListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserChatList) > 0 {
		for iNdEx := len(m.UserChatList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserChatList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserChatList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserChatList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserChatList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x30
	}
	if m.GroupId != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x28
	}
	if m.Extra != nil {
		{
			size, err := m.Extra.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintChat(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintChat(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintChat(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintChat(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChat(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteChatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteChatReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteChatReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintChat(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteChatResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteChatResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteChatResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ChatGetImConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatGetImConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatGetImConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ChatGetImConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatGetImConfigResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatGetImConfigResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExpressionUrl) > 0 {
		i -= len(m.ExpressionUrl)
		copy(dAtA[i:], m.ExpressionUrl)
		i = encodeVarintChat(dAtA, i, uint64(len(m.ExpressionUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UpgradeText) > 0 {
		i -= len(m.UpgradeText)
		copy(dAtA[i:], m.UpgradeText)
		i = encodeVarintChat(dAtA, i, uint64(len(m.UpgradeText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupSilenceText) > 0 {
		i -= len(m.GroupSilenceText)
		copy(dAtA[i:], m.GroupSilenceText)
		i = encodeVarintChat(dAtA, i, uint64(len(m.GroupSilenceText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupSilencePeriod) > 0 {
		for iNdEx := len(m.GroupSilencePeriod) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupSilencePeriod[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.GroupSilence != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.GroupSilence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupSilencePeriodArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupSilencePeriodArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupSilencePeriodArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gspa) > 0 {
		dAtA3 := make([]byte, len(m.Gspa)*10)
		var j2 int
		for _, num1 := range m.Gspa {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintChat(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChat(dAtA []byte, offset int, v uint64) int {
	offset -= sovChat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserChatListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChat(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserChatListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserChatList) > 0 {
		for _, e := range m.UserChatList {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserChatList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.Extra != nil {
		l = m.Extra.Size()
		n += 1 + l + sovChat(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovChat(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovChat(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteChatReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChat(uint64(m.UserId))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteChatResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChatGetImConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChatGetImConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupSilence != 0 {
		n += 1 + sovChat(uint64(m.GroupSilence))
	}
	if len(m.GroupSilencePeriod) > 0 {
		for _, e := range m.GroupSilencePeriod {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	l = len(m.GroupSilenceText)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.UpgradeText)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.ExpressionUrl)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupSilencePeriodArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gspa) > 0 {
		l = 0
		for _, e := range m.Gspa {
			l += sovChat(uint64(e))
		}
		n += 1 + sovChat(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChat(x uint64) (n int) {
	return sovChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserChatListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserChatListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserChatListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserChatListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserChatListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserChatListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserChatList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserChatList = append(m.UserChatList, &UserChatList{})
			if err := m.UserChatList[len(m.UserChatList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserChatList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserChatList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserChatList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = &ListExtra{}
			}
			if err := m.Extra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteChatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteChatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteChatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteChatResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteChatResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteChatResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatGetImConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatGetImConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatGetImConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatGetImConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatGetImConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatGetImConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSilence", wireType)
			}
			m.GroupSilence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupSilence |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSilencePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupSilencePeriod = append(m.GroupSilencePeriod, &GroupSilencePeriodArray{})
			if err := m.GroupSilencePeriod[len(m.GroupSilencePeriod)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSilenceText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupSilenceText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgradeText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressionUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpressionUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupSilencePeriodArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupSilencePeriodArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupSilencePeriodArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Gspa = append(m.Gspa, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChat
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChat
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Gspa) == 0 {
					m.Gspa = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Gspa = append(m.Gspa, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Gspa", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChat = fmt.Errorf("proto: unexpected end of group")
)
