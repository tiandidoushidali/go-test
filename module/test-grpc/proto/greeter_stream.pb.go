// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greeter_stream.proto

//声明 包名

package test_student_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "go-test/third/github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//stream请求结构
type StreamReqData struct {
	Data                 string             `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	IllName              *types.StringValue `protobuf:"bytes,2,opt,name=IllName,proto3" json:"IllName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StreamReqData) Reset()         { *m = StreamReqData{} }
func (m *StreamReqData) String() string { return proto.CompactTextString(m) }
func (*StreamReqData) ProtoMessage()    {}
func (*StreamReqData) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd6436e1c43aca59, []int{0}
}
func (m *StreamReqData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamReqData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamReqData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamReqData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamReqData.Merge(m, src)
}
func (m *StreamReqData) XXX_Size() int {
	return m.Size()
}
func (m *StreamReqData) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamReqData.DiscardUnknown(m)
}

var xxx_messageInfo_StreamReqData proto.InternalMessageInfo

func (m *StreamReqData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *StreamReqData) GetIllName() *types.StringValue {
	if m != nil {
		return m.IllName
	}
	return nil
}

//stream返回结构
type StreamResData struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamResData) Reset()         { *m = StreamResData{} }
func (m *StreamResData) String() string { return proto.CompactTextString(m) }
func (*StreamResData) ProtoMessage()    {}
func (*StreamResData) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd6436e1c43aca59, []int{1}
}
func (m *StreamResData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamResData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamResData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamResData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResData.Merge(m, src)
}
func (m *StreamResData) XXX_Size() int {
	return m.Size()
}
func (m *StreamResData) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResData.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResData proto.InternalMessageInfo

func (m *StreamResData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamReqData)(nil), "test.student.v1.StreamReqData")
	proto.RegisterType((*StreamResData)(nil), "test.student.v1.StreamResData")
}

func init() { proto.RegisterFile("greeter_stream.proto", fileDescriptor_fd6436e1c43aca59) }

var fileDescriptor_fd6436e1c43aca59 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x2f, 0x4a, 0x4d,
	0x2d, 0x49, 0x2d, 0x8a, 0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2b, 0x2e, 0x29, 0x4d, 0x49, 0xcd, 0x2b, 0xd1, 0x2b,
	0x33, 0x94, 0xb2, 0x4e, 0xcf, 0xd7, 0x05, 0x89, 0xe9, 0x97, 0x64, 0x64, 0x16, 0xa5, 0xe8, 0xa7,
	0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7, 0xe7, 0xa7, 0xe7, 0xeb, 0x83,
	0x75, 0x25, 0x95, 0xa6, 0xe9, 0x97, 0x54, 0x16, 0xa4, 0x16, 0xeb, 0x97, 0x17, 0x25, 0x16, 0x14,
	0xa4, 0x16, 0x15, 0x43, 0x4c, 0x53, 0x8a, 0xe3, 0xe2, 0x0d, 0x06, 0x9b, 0x1e, 0x94, 0x5a, 0xe8,
	0x92, 0x58, 0x92, 0x28, 0x24, 0xc4, 0xc5, 0x92, 0x92, 0x58, 0x92, 0x28, 0xc1, 0xa8, 0xc0, 0xa8,
	0xc1, 0x19, 0x04, 0x66, 0x0b, 0x59, 0x72, 0xb1, 0x7b, 0xe6, 0xe4, 0xf8, 0x25, 0xe6, 0xa6, 0x4a,
	0x30, 0x29, 0x30, 0x6a, 0x70, 0x1b, 0xc9, 0xeb, 0x81, 0x8c, 0x06, 0x9b, 0xa0, 0x07, 0x33, 0x5f,
	0x2f, 0xb8, 0xa4, 0x28, 0x33, 0x2f, 0x3d, 0x2c, 0x31, 0xa7, 0x34, 0x35, 0x08, 0xa6, 0x5e, 0x49,
	0x19, 0x61, 0x7e, 0x31, 0x2e, 0xf3, 0x8d, 0x5a, 0x98, 0xb8, 0x78, 0xdd, 0x21, 0x7e, 0x85, 0x28,
	0x16, 0xf2, 0xe7, 0xe2, 0x74, 0x4f, 0x2d, 0x81, 0x72, 0xe4, 0xf4, 0xd0, 0xbc, 0xac, 0x87, 0xe2,
	0x64, 0x29, 0xdc, 0xf2, 0x60, 0x2b, 0x95, 0x18, 0x0c, 0x18, 0x41, 0x06, 0x06, 0x94, 0x52, 0xcd,
	0x40, 0x0d, 0x46, 0xa1, 0x40, 0x2e, 0x4e, 0xc7, 0x9c, 0x1c, 0xea, 0x19, 0x68, 0xc0, 0xe8, 0xc4,
	0x73, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x26, 0xb1, 0x81,
	0x03, 0xd6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x1b, 0xe6, 0x23, 0x06, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterStreamClient is the client API for GreeterStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterStreamClient interface {
	//
	//以下 分别是 服务端 推送流， 客户端 推送流 ，双向流。
	GetStream(ctx context.Context, in *StreamReqData, opts ...grpc.CallOption) (GreeterStream_GetStreamClient, error)
	PutStream(ctx context.Context, opts ...grpc.CallOption) (GreeterStream_PutStreamClient, error)
	AllStream(ctx context.Context, opts ...grpc.CallOption) (GreeterStream_AllStreamClient, error)
}

type greeterStreamClient struct {
	cc *grpc.ClientConn
}

func NewGreeterStreamClient(cc *grpc.ClientConn) GreeterStreamClient {
	return &greeterStreamClient{cc}
}

func (c *greeterStreamClient) GetStream(ctx context.Context, in *StreamReqData, opts ...grpc.CallOption) (GreeterStream_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GreeterStream_serviceDesc.Streams[0], "/test.student.v1.GreeterStream/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterStreamGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreeterStream_GetStreamClient interface {
	Recv() (*StreamResData, error)
	grpc.ClientStream
}

type greeterStreamGetStreamClient struct {
	grpc.ClientStream
}

func (x *greeterStreamGetStreamClient) Recv() (*StreamResData, error) {
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterStreamClient) PutStream(ctx context.Context, opts ...grpc.CallOption) (GreeterStream_PutStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GreeterStream_serviceDesc.Streams[1], "/test.student.v1.GreeterStream/PutStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterStreamPutStreamClient{stream}
	return x, nil
}

type GreeterStream_PutStreamClient interface {
	Send(*StreamReqData) error
	CloseAndRecv() (*StreamResData, error)
	grpc.ClientStream
}

type greeterStreamPutStreamClient struct {
	grpc.ClientStream
}

func (x *greeterStreamPutStreamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterStreamPutStreamClient) CloseAndRecv() (*StreamResData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterStreamClient) AllStream(ctx context.Context, opts ...grpc.CallOption) (GreeterStream_AllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GreeterStream_serviceDesc.Streams[2], "/test.student.v1.GreeterStream/AllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterStreamAllStreamClient{stream}
	return x, nil
}

type GreeterStream_AllStreamClient interface {
	Send(*StreamReqData) error
	Recv() (*StreamResData, error)
	grpc.ClientStream
}

type greeterStreamAllStreamClient struct {
	grpc.ClientStream
}

func (x *greeterStreamAllStreamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterStreamAllStreamClient) Recv() (*StreamResData, error) {
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterStreamServer is the server API for GreeterStream service.
type GreeterStreamServer interface {
	//
	//以下 分别是 服务端 推送流， 客户端 推送流 ，双向流。
	GetStream(*StreamReqData, GreeterStream_GetStreamServer) error
	PutStream(GreeterStream_PutStreamServer) error
	AllStream(GreeterStream_AllStreamServer) error
}

// UnimplementedGreeterStreamServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterStreamServer struct {
}

func (*UnimplementedGreeterStreamServer) GetStream(req *StreamReqData, srv GreeterStream_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedGreeterStreamServer) PutStream(srv GreeterStream_PutStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PutStream not implemented")
}
func (*UnimplementedGreeterStreamServer) AllStream(srv GreeterStream_AllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllStream not implemented")
}

func RegisterGreeterStreamServer(s *grpc.Server, srv GreeterStreamServer) {
	s.RegisterService(&_GreeterStream_serviceDesc, srv)
}

func _GreeterStream_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReqData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterStreamServer).GetStream(m, &greeterStreamGetStreamServer{stream})
}

type GreeterStream_GetStreamServer interface {
	Send(*StreamResData) error
	grpc.ServerStream
}

type greeterStreamGetStreamServer struct {
	grpc.ServerStream
}

func (x *greeterStreamGetStreamServer) Send(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func _GreeterStream_PutStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterStreamServer).PutStream(&greeterStreamPutStreamServer{stream})
}

type GreeterStream_PutStreamServer interface {
	SendAndClose(*StreamResData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type greeterStreamPutStreamServer struct {
	grpc.ServerStream
}

func (x *greeterStreamPutStreamServer) SendAndClose(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterStreamPutStreamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreeterStream_AllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterStreamServer).AllStream(&greeterStreamAllStreamServer{stream})
}

type GreeterStream_AllStreamServer interface {
	Send(*StreamResData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type greeterStreamAllStreamServer struct {
	grpc.ServerStream
}

func (x *greeterStreamAllStreamServer) Send(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterStreamAllStreamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GreeterStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.student.v1.GreeterStream",
	HandlerType: (*GreeterStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _GreeterStream_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutStream",
			Handler:       _GreeterStream_PutStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllStream",
			Handler:       _GreeterStream_AllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greeter_stream.proto",
}

func (m *StreamReqData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamReqData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamReqData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IllName != nil {
		{
			size, err := m.IllName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGreeterStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintGreeterStream(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamResData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamResData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamResData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintGreeterStream(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGreeterStream(dAtA []byte, offset int, v uint64) int {
	offset -= sovGreeterStream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamReqData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGreeterStream(uint64(l))
	}
	if m.IllName != nil {
		l = m.IllName.Size()
		n += 1 + l + sovGreeterStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamResData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGreeterStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGreeterStream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGreeterStream(x uint64) (n int) {
	return sovGreeterStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamReqData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGreeterStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamReqData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamReqData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGreeterStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGreeterStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGreeterStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IllName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGreeterStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGreeterStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGreeterStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IllName == nil {
				m.IllName = &types.StringValue{}
			}
			if err := m.IllName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGreeterStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGreeterStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamResData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGreeterStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamResData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamResData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGreeterStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGreeterStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGreeterStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGreeterStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGreeterStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGreeterStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGreeterStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGreeterStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGreeterStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGreeterStream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGreeterStream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGreeterStream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGreeterStream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGreeterStream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGreeterStream = fmt.Errorf("proto: unexpected end of group")
)
