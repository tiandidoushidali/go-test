// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Message
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protocol_message_misc "go-test/grape/protocol/message/misc"
import protocol_message_misc1 "go-test/grape/protocol/message/misc"
import protocol_message_types1 "go-test/grape/protocol/message/types"
import protocol_message_types2 "go-test/grape/protocol/message/types"
import protocol_message_types3 "go-test/grape/protocol/message/types"
import protocol_message_types4 "go-test/grape/protocol/message/types"
import protocol_message_types5 "go-test/grape/protocol/message/types"
import protocol_message_types6 "go-test/grape/protocol/message/types"
import protocol_message_types7 "go-test/grape/protocol/message/types"
import protocol_message_types8 "go-test/grape/protocol/message/types"
import protocol_message_types9 "go-test/grape/protocol/message/types"
import protocol_message_commands "go-test/grape/protocol/message/commands"
import protocol_message_commands1 "go-test/grape/protocol/message/commands"
import protocol_message_commands2 "go-test/grape/protocol/message/commands"
import protocol_message_commands3 "go-test/grape/protocol/message/commands"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Id    uint64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IdStr string                      `protobuf:"bytes,20,opt,name=idStr" json:"idStr,omitempty"`
	From  *protocol_message_misc.User `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	// Types that are valid to be assigned to To:
	//	*Message_User
	//	*Message_Group
	To isMessage_To `protobuf_oneof:"to"`
	// Types that are valid to be assigned to Data:
	//	*Message_Text
	//	*Message_Voice
	//	*Message_Card
	//	*Message_Image
	//	*Message_Location
	//	*Message_Notice
	//	*Message_BusinessCard
	//	*Message_Json
	//	*Message_Notify
	//	*Message_Login
	//	*Message_Withdraw
	//	*Message_GroupOperation
	//	*Message_FriendOperation
	Data isMessage_Data `protobuf_oneof:"data"`
	Ext  string         `protobuf:"bytes,19,opt,name=ext" json:"ext,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMessage_To interface {
	isMessage_To()
}
type isMessage_Data interface {
	isMessage_Data()
}

type Message_User struct {
	User *protocol_message_misc.User `protobuf:"bytes,3,opt,name=user,oneof"`
}
type Message_Group struct {
	Group *protocol_message_misc1.Group `protobuf:"bytes,4,opt,name=group,oneof"`
}
type Message_Text struct {
	Text *protocol_message_types1.Text `protobuf:"bytes,5,opt,name=text,oneof"`
}
type Message_Voice struct {
	Voice *protocol_message_types2.Voice `protobuf:"bytes,6,opt,name=voice,oneof"`
}
type Message_Card struct {
	Card *protocol_message_types4.Card `protobuf:"bytes,7,opt,name=card,oneof"`
}
type Message_Image struct {
	Image *protocol_message_types8.Image `protobuf:"bytes,8,opt,name=image,oneof"`
}
type Message_Location struct {
	Location *protocol_message_types3.Location `protobuf:"bytes,9,opt,name=location,oneof"`
}
type Message_Notice struct {
	Notice *protocol_message_types9.Notice `protobuf:"bytes,10,opt,name=notice,oneof"`
}
type Message_BusinessCard struct {
	BusinessCard *protocol_message_types5.BusinessCard `protobuf:"bytes,11,opt,name=businessCard,oneof"`
}
type Message_Json struct {
	Json *protocol_message_types7.Json `protobuf:"bytes,12,opt,name=json,oneof"`
}
type Message_Notify struct {
	Notify *protocol_message_types6.BusinessNotify `protobuf:"bytes,13,opt,name=notify,oneof"`
}
type Message_Login struct {
	Login *protocol_message_commands.Login `protobuf:"bytes,15,opt,name=login,oneof"`
}
type Message_Withdraw struct {
	Withdraw *protocol_message_commands1.Withdraw `protobuf:"bytes,16,opt,name=withdraw,oneof"`
}
type Message_GroupOperation struct {
	GroupOperation *protocol_message_commands2.GroupOperation `protobuf:"bytes,17,opt,name=groupOperation,oneof"`
}
type Message_FriendOperation struct {
	FriendOperation *protocol_message_commands3.FriendOperation `protobuf:"bytes,18,opt,name=friendOperation,oneof"`
}

func (*Message_User) isMessage_To()              {}
func (*Message_Group) isMessage_To()             {}
func (*Message_Text) isMessage_Data()            {}
func (*Message_Voice) isMessage_Data()           {}
func (*Message_Card) isMessage_Data()            {}
func (*Message_Image) isMessage_Data()           {}
func (*Message_Location) isMessage_Data()        {}
func (*Message_Notice) isMessage_Data()          {}
func (*Message_BusinessCard) isMessage_Data()    {}
func (*Message_Json) isMessage_Data()            {}
func (*Message_Notify) isMessage_Data()          {}
func (*Message_Login) isMessage_Data()           {}
func (*Message_Withdraw) isMessage_Data()        {}
func (*Message_GroupOperation) isMessage_Data()  {}
func (*Message_FriendOperation) isMessage_Data() {}

func (m *Message) GetTo() isMessage_To {
	if m != nil {
		return m.To
	}
	return nil
}
func (m *Message) GetData() isMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Message) GetIdStr() string {
	if m != nil {
		return m.IdStr
	}
	return ""
}

func (m *Message) GetFrom() *protocol_message_misc.User {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetUser() *protocol_message_misc.User {
	if x, ok := m.GetTo().(*Message_User); ok {
		return x.User
	}
	return nil
}

func (m *Message) GetGroup() *protocol_message_misc1.Group {
	if x, ok := m.GetTo().(*Message_Group); ok {
		return x.Group
	}
	return nil
}

func (m *Message) GetText() *protocol_message_types1.Text {
	if x, ok := m.GetData().(*Message_Text); ok {
		return x.Text
	}
	return nil
}

func (m *Message) GetVoice() *protocol_message_types2.Voice {
	if x, ok := m.GetData().(*Message_Voice); ok {
		return x.Voice
	}
	return nil
}

func (m *Message) GetCard() *protocol_message_types4.Card {
	if x, ok := m.GetData().(*Message_Card); ok {
		return x.Card
	}
	return nil
}

func (m *Message) GetImage() *protocol_message_types8.Image {
	if x, ok := m.GetData().(*Message_Image); ok {
		return x.Image
	}
	return nil
}

func (m *Message) GetLocation() *protocol_message_types3.Location {
	if x, ok := m.GetData().(*Message_Location); ok {
		return x.Location
	}
	return nil
}

func (m *Message) GetNotice() *protocol_message_types9.Notice {
	if x, ok := m.GetData().(*Message_Notice); ok {
		return x.Notice
	}
	return nil
}

func (m *Message) GetBusinessCard() *protocol_message_types5.BusinessCard {
	if x, ok := m.GetData().(*Message_BusinessCard); ok {
		return x.BusinessCard
	}
	return nil
}

func (m *Message) GetJson() *protocol_message_types7.Json {
	if x, ok := m.GetData().(*Message_Json); ok {
		return x.Json
	}
	return nil
}

func (m *Message) GetNotify() *protocol_message_types6.BusinessNotify {
	if x, ok := m.GetData().(*Message_Notify); ok {
		return x.Notify
	}
	return nil
}

func (m *Message) GetLogin() *protocol_message_commands.Login {
	if x, ok := m.GetData().(*Message_Login); ok {
		return x.Login
	}
	return nil
}

func (m *Message) GetWithdraw() *protocol_message_commands1.Withdraw {
	if x, ok := m.GetData().(*Message_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (m *Message) GetGroupOperation() *protocol_message_commands2.GroupOperation {
	if x, ok := m.GetData().(*Message_GroupOperation); ok {
		return x.GroupOperation
	}
	return nil
}

func (m *Message) GetFriendOperation() *protocol_message_commands3.FriendOperation {
	if x, ok := m.GetData().(*Message_FriendOperation); ok {
		return x.FriendOperation
	}
	return nil
}

func (m *Message) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_User)(nil),
		(*Message_Group)(nil),
		(*Message_Text)(nil),
		(*Message_Voice)(nil),
		(*Message_Card)(nil),
		(*Message_Image)(nil),
		(*Message_Location)(nil),
		(*Message_Notice)(nil),
		(*Message_BusinessCard)(nil),
		(*Message_Json)(nil),
		(*Message_Notify)(nil),
		(*Message_Login)(nil),
		(*Message_Withdraw)(nil),
		(*Message_GroupOperation)(nil),
		(*Message_FriendOperation)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// to
	switch x := m.To.(type) {
	case *Message_User:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.User); err != nil {
			return err
		}
	case *Message_Group:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Group); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.To has unexpected type %T", x)
	}
	// data
	switch x := m.Data.(type) {
	case *Message_Text:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Text); err != nil {
			return err
		}
	case *Message_Voice:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Voice); err != nil {
			return err
		}
	case *Message_Card:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Card); err != nil {
			return err
		}
	case *Message_Image:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Image); err != nil {
			return err
		}
	case *Message_Location:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Location); err != nil {
			return err
		}
	case *Message_Notice:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Notice); err != nil {
			return err
		}
	case *Message_BusinessCard:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BusinessCard); err != nil {
			return err
		}
	case *Message_Json:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Json); err != nil {
			return err
		}
	case *Message_Notify:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Notify); err != nil {
			return err
		}
	case *Message_Login:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Login); err != nil {
			return err
		}
	case *Message_Withdraw:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Withdraw); err != nil {
			return err
		}
	case *Message_GroupOperation:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroupOperation); err != nil {
			return err
		}
	case *Message_FriendOperation:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FriendOperation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Data has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // to.user
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_misc.User)
		err := b.DecodeMessage(msg)
		m.To = &Message_User{msg}
		return true, err
	case 4: // to.group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_misc1.Group)
		err := b.DecodeMessage(msg)
		m.To = &Message_Group{msg}
		return true, err
	case 5: // data.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_types1.Text)
		err := b.DecodeMessage(msg)
		m.Data = &Message_Text{msg}
		return true, err
	case 6: // data.voice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_types2.Voice)
		err := b.DecodeMessage(msg)
		m.Data = &Message_Voice{msg}
		return true, err
	case 7: // data.card
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_types4.Card)
		err := b.DecodeMessage(msg)
		m.Data = &Message_Card{msg}
		return true, err
	case 8: // data.image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_types8.Image)
		err := b.DecodeMessage(msg)
		m.Data = &Message_Image{msg}
		return true, err
	case 9: // data.location
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_types3.Location)
		err := b.DecodeMessage(msg)
		m.Data = &Message_Location{msg}
		return true, err
	case 10: // data.notice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_types9.Notice)
		err := b.DecodeMessage(msg)
		m.Data = &Message_Notice{msg}
		return true, err
	case 11: // data.businessCard
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_types5.BusinessCard)
		err := b.DecodeMessage(msg)
		m.Data = &Message_BusinessCard{msg}
		return true, err
	case 12: // data.json
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_types7.Json)
		err := b.DecodeMessage(msg)
		m.Data = &Message_Json{msg}
		return true, err
	case 13: // data.notify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_types6.BusinessNotify)
		err := b.DecodeMessage(msg)
		m.Data = &Message_Notify{msg}
		return true, err
	case 15: // data.login
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_commands.Login)
		err := b.DecodeMessage(msg)
		m.Data = &Message_Login{msg}
		return true, err
	case 16: // data.withdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_commands1.Withdraw)
		err := b.DecodeMessage(msg)
		m.Data = &Message_Withdraw{msg}
		return true, err
	case 17: // data.groupOperation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_commands2.GroupOperation)
		err := b.DecodeMessage(msg)
		m.Data = &Message_GroupOperation{msg}
		return true, err
	case 18: // data.friendOperation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protocol_message_commands3.FriendOperation)
		err := b.DecodeMessage(msg)
		m.Data = &Message_FriendOperation{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// to
	switch x := m.To.(type) {
	case *Message_User:
		s := proto.Size(x.User)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Group:
		s := proto.Size(x.Group)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// data
	switch x := m.Data.(type) {
	case *Message_Text:
		s := proto.Size(x.Text)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Voice:
		s := proto.Size(x.Voice)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Card:
		s := proto.Size(x.Card)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Image:
		s := proto.Size(x.Image)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Location:
		s := proto.Size(x.Location)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Notice:
		s := proto.Size(x.Notice)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_BusinessCard:
		s := proto.Size(x.BusinessCard)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Json:
		s := proto.Size(x.Json)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Notify:
		s := proto.Size(x.Notify)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Login:
		s := proto.Size(x.Login)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Withdraw:
		s := proto.Size(x.Withdraw)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_GroupOperation:
		s := proto.Size(x.GroupOperation)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_FriendOperation:
		s := proto.Size(x.FriendOperation)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Message)(nil), "protocol.message.Message")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x5d, 0x6f, 0xd3, 0x3c,
	0x14, 0xc7, 0x97, 0x2e, 0xed, 0x3a, 0xef, 0xad, 0xf3, 0x53, 0x3d, 0x98, 0x0e, 0x46, 0x05, 0x08,
	0x15, 0x2e, 0x52, 0x31, 0x40, 0xea, 0x15, 0x82, 0x22, 0xb1, 0x30, 0x8d, 0x21, 0x79, 0x30, 0x24,
	0x6e, 0xa6, 0x2c, 0x71, 0x8b, 0xa1, 0x89, 0x2b, 0x27, 0x65, 0xeb, 0x07, 0xe2, 0x7b, 0xa2, 0x73,
	0x1c, 0x67, 0x6d, 0xa5, 0x64, 0x57, 0x5b, 0xff, 0xfe, 0xff, 0xce, 0xb1, 0xcf, 0x4b, 0xc8, 0x4e,
	0x2c, 0xd2, 0x34, 0x18, 0x0b, 0x6f, 0xaa, 0x55, 0xa6, 0x68, 0x0b, 0xff, 0x84, 0x6a, 0xe2, 0xe5,
	0x7a, 0x67, 0x2f, 0x96, 0x69, 0xd8, 0x9f, 0xa5, 0x42, 0x1b, 0x4b, 0xa7, 0x85, 0xc2, 0x58, 0xab,
	0xd9, 0xd4, 0x2a, 0xd9, 0x7c, 0x2a, 0xd2, 0x7e, 0x26, 0x6e, 0xb2, 0x5c, 0xd9, 0x37, 0xca, 0x1f,
	0x25, 0xc3, 0x3c, 0x72, 0xa7, 0x6d, 0xa4, 0x89, 0x0a, 0x83, 0x4c, 0xaa, 0x64, 0x19, 0x0d, 0x03,
	0x1d, 0xe5, 0xca, 0x7d, 0xa3, 0x5c, 0xcd, 0x52, 0x99, 0x88, 0x34, 0xbd, 0x5c, 0x38, 0x3a, 0x58,
	0x39, 0x4a, 0x54, 0x26, 0x47, 0xf3, 0xe5, 0x48, 0xbf, 0xd2, 0x22, 0x76, 0x7e, 0x09, 0x19, 0x17,
	0xcf, 0xeb, 0x50, 0x23, 0x01, 0x78, 0x7b, 0xb1, 0x50, 0xc5, 0x71, 0x90, 0x44, 0x70, 0xb7, 0xb1,
	0xb4, 0xf0, 0xbd, 0x42, 0xbd, 0x96, 0xd9, 0xcf, 0x48, 0x07, 0xd7, 0xf9, 0xc1, 0x61, 0x71, 0x80,
	0x25, 0xb8, 0x54, 0x53, 0xa1, 0x17, 0x5f, 0xf4, 0xa8, 0x38, 0x1f, 0x69, 0x29, 0x92, 0x68, 0xd5,
	0xf0, 0xf8, 0x6f, 0x93, 0x6c, 0x7c, 0x36, 0xc5, 0xa5, 0xbb, 0xa4, 0x26, 0x23, 0xe6, 0x74, 0x9d,
	0x9e, 0xcb, 0x6b, 0x32, 0xa2, 0x6d, 0x52, 0x97, 0xd1, 0x79, 0xa6, 0x59, 0xbb, 0xeb, 0xf4, 0x36,
	0xb9, 0xf9, 0x41, 0xfb, 0xc4, 0x1d, 0x69, 0x15, 0xb3, 0x5a, 0xd7, 0xe9, 0x6d, 0x1d, 0x1d, 0x78,
	0xab, 0x3d, 0xf2, 0xa0, 0x23, 0xde, 0xb7, 0x54, 0x68, 0x8e, 0x46, 0xfa, 0x92, 0xb8, 0xd0, 0x30,
	0xb6, 0x7e, 0x27, 0xe0, 0xaf, 0x71, 0xb4, 0xd2, 0xd7, 0xa4, 0x8e, 0xef, 0x61, 0x2e, 0x32, 0x0f,
	0x4a, 0x98, 0x63, 0xf0, 0xf8, 0x6b, 0xdc, 0x98, 0xe9, 0x11, 0x71, 0xa1, 0xeb, 0xac, 0x5e, 0x06,
	0x61, 0xbd, 0xbd, 0xaf, 0xe2, 0x26, 0xf3, 0x1d, 0x8e, 0x5e, 0xfa, 0x86, 0xd4, 0x71, 0x2e, 0x58,
	0x03, 0xa1, 0x87, 0x65, 0xd0, 0x05, 0x98, 0x7c, 0x87, 0x1b, 0x37, 0xa4, 0x82, 0x51, 0x60, 0x1b,
	0xd5, 0xa9, 0x3e, 0x04, 0x3a, 0x82, 0x54, 0xe0, 0x85, 0x54, 0xd8, 0x7d, 0xd6, 0xac, 0x4e, 0xf5,
	0x09, 0x4c, 0x90, 0x0a, 0xdd, 0xf4, 0x2d, 0x69, 0xda, 0x31, 0x65, 0x9b, 0x48, 0x76, 0xcb, 0xc8,
	0xd3, 0xdc, 0xe7, 0x3b, 0xbc, 0x60, 0xe8, 0x80, 0x34, 0xcc, 0x84, 0x31, 0x82, 0xf4, 0x61, 0x19,
	0x7d, 0x86, 0x2e, 0xdf, 0xe1, 0xb9, 0x9f, 0x9e, 0x90, 0x6d, 0x3b, 0xdd, 0xf0, 0x10, 0xb6, 0x85,
	0xfc, 0xd3, 0x32, 0x7e, 0xb8, 0xe0, 0xf5, 0x1d, 0xbe, 0xc4, 0x42, 0xc1, 0x60, 0x19, 0xd8, 0x76,
	0x75, 0xc1, 0x4e, 0x52, 0xbc, 0x3d, 0x7a, 0xe9, 0x3b, 0x73, 0xf3, 0xd1, 0x9c, 0xed, 0x20, 0xf5,
	0xec, 0xae, 0xcc, 0x67, 0xe8, 0xb6, 0x2f, 0x18, 0xcd, 0xe9, 0x80, 0xd4, 0x71, 0x8d, 0xd8, 0x5e,
	0x59, 0xe1, 0xec, 0x7e, 0x78, 0xa7, 0xe0, 0x83, 0xaa, 0x23, 0x40, 0xdf, 0x93, 0xa6, 0x5d, 0x35,
	0xd6, 0x42, 0xf8, 0x49, 0x05, 0xfc, 0x3d, 0xb7, 0x42, 0xe1, 0x2d, 0x46, 0xcf, 0xc9, 0x2e, 0xce,
	0xe5, 0x17, 0xbb, 0x72, 0x6c, 0x1f, 0x03, 0x3d, 0xaf, 0x08, 0x74, 0xbc, 0x04, 0xf8, 0x0e, 0x5f,
	0x09, 0x41, 0x2f, 0xc8, 0x9e, 0xd9, 0xe4, 0xdb, 0xa8, 0x14, 0xa3, 0xbe, 0xa8, 0x88, 0xfa, 0x71,
	0x99, 0xf0, 0x1d, 0xbe, 0x1a, 0x84, 0xb6, 0xc8, 0x3a, 0xac, 0xce, 0x7f, 0xb8, 0xe9, 0xf0, 0xef,
	0xd0, 0x25, 0xb5, 0x4c, 0x0d, 0x1b, 0xc4, 0x8d, 0x82, 0x2c, 0x18, 0x0e, 0x08, 0x7c, 0x6a, 0xbc,
	0x58, 0x44, 0x13, 0x99, 0xfc, 0xb6, 0x9f, 0xdf, 0x85, 0x6c, 0x3f, 0xfe, 0x1f, 0xeb, 0x60, 0x2a,
	0xfa, 0x56, 0xef, 0xe7, 0xfa, 0x55, 0x03, 0x95, 0x57, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd4,
	0x7f, 0x46, 0x6c, 0xdc, 0x05, 0x00, 0x00,
}
