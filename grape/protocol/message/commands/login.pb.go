// Code generated by protoc-gen-go.
// source: commands/login.proto
// DO NOT EDIT!

package commands

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Login struct {
	Device     int32  `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Platform   int32  `protobuf:"varint,2,opt,name=platform" json:"platform,omitempty"`
	Token      string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	SessionKey string `protobuf:"bytes,4,opt,name=session_key,json=sessionKey" json:"session_key,omitempty"`
	Version    string `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
}

func (m *Login) Reset()                    { *m = Login{} }
func (m *Login) String() string            { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()               {}
func (*Login) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Login) GetDevice() int32 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *Login) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *Login) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Login) GetSessionKey() string {
	if m != nil {
		return m.SessionKey
	}
	return ""
}

func (m *Login) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*Login)(nil), "protocol.message.commands.Login")
}

func init() { proto.RegisterFile("commands/login.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8e, 0xb1, 0x4e, 0xc5, 0x20,
	0x14, 0x86, 0x83, 0xca, 0x55, 0x8f, 0x1b, 0xb9, 0x31, 0xe8, 0x72, 0x1b, 0x17, 0x3b, 0xc1, 0xe0,
	0x1b, 0x38, 0xaa, 0x53, 0x47, 0x17, 0x83, 0xf4, 0xd8, 0x90, 0x02, 0xa7, 0x81, 0xa6, 0x49, 0xdf,
	0xc1, 0x87, 0x36, 0xc5, 0xe2, 0xe6, 0x74, 0xf2, 0x9d, 0xef, 0x1b, 0x7e, 0x38, 0x5a, 0x0a, 0xc1,
	0xc4, 0x3e, 0x6b, 0x4f, 0x83, 0x8b, 0x6a, 0x4a, 0x34, 0x93, 0xb8, 0x2b, 0xc7, 0x92, 0x57, 0x01,
	0x73, 0x36, 0x03, 0xaa, 0x9a, 0x3d, 0x7c, 0x33, 0xe0, 0x6f, 0x5b, 0x2a, 0x6e, 0xe1, 0xd0, 0xe3,
	0xe2, 0x2c, 0x4a, 0xd6, 0xb0, 0x96, 0x77, 0x3b, 0x89, 0x7b, 0xb8, 0x9a, 0xbc, 0x99, 0xbf, 0x28,
	0x05, 0x79, 0x56, 0xcc, 0x1f, 0x8b, 0x23, 0xf0, 0x99, 0x46, 0x8c, 0xf2, 0xbc, 0x61, 0xed, 0x75,
	0xf7, 0x0b, 0xe2, 0x04, 0x37, 0x19, 0x73, 0x76, 0x14, 0x3f, 0x46, 0x5c, 0xe5, 0x45, 0x71, 0xb0,
	0xbf, 0x5e, 0x71, 0x15, 0x12, 0x2e, 0x17, 0x4c, 0x1b, 0x49, 0x5e, 0x64, 0xc5, 0xe7, 0x17, 0x78,
	0xb4, 0x14, 0x54, 0xc0, 0xde, 0xbb, 0x38, 0x62, 0x52, 0xff, 0x2e, 0x7f, 0x3f, 0x0d, 0xc9, 0x4c,
	0xa8, 0x6b, 0xa0, 0xf7, 0x40, 0xd7, 0xe0, 0xf3, 0x50, 0xd4, 0xd3, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x08, 0x14, 0x0c, 0x6d, 0x14, 0x01, 0x00, 0x00,
}
